// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class enet_h extends enet_h_1 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 38
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_TIME_H 1
     * }
     */
    public static int _SYS_TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SOCKET_H 1
     * }
     */
    public static int _SYS_SOCKET_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __iovec_defined 1
     * }
     */
    public static int __iovec_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define PF_UNSPEC 0
     * }
     */
    public static int PF_UNSPEC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define PF_LOCAL 1
     * }
     */
    public static int PF_LOCAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define PF_INET 2
     * }
     */
    public static int PF_INET() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define PF_AX25 3
     * }
     */
    public static int PF_AX25() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define PF_IPX 4
     * }
     */
    public static int PF_IPX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define PF_APPLETALK 5
     * }
     */
    public static int PF_APPLETALK() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define PF_NETROM 6
     * }
     */
    public static int PF_NETROM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define PF_BRIDGE 7
     * }
     */
    public static int PF_BRIDGE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define PF_ATMPVC 8
     * }
     */
    public static int PF_ATMPVC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define PF_X25 9
     * }
     */
    public static int PF_X25() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define PF_INET6 10
     * }
     */
    public static int PF_INET6() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define PF_ROSE 11
     * }
     */
    public static int PF_ROSE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define PF_DECnet 12
     * }
     */
    public static int PF_DECnet() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define PF_NETBEUI 13
     * }
     */
    public static int PF_NETBEUI() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define PF_SECURITY 14
     * }
     */
    public static int PF_SECURITY() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define PF_KEY 15
     * }
     */
    public static int PF_KEY() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define PF_NETLINK 16
     * }
     */
    public static int PF_NETLINK() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define PF_PACKET 17
     * }
     */
    public static int PF_PACKET() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define PF_ASH 18
     * }
     */
    public static int PF_ASH() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define PF_ECONET 19
     * }
     */
    public static int PF_ECONET() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define PF_ATMSVC 20
     * }
     */
    public static int PF_ATMSVC() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define PF_RDS 21
     * }
     */
    public static int PF_RDS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define PF_SNA 22
     * }
     */
    public static int PF_SNA() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define PF_IRDA 23
     * }
     */
    public static int PF_IRDA() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define PF_PPPOX 24
     * }
     */
    public static int PF_PPPOX() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define PF_WANPIPE 25
     * }
     */
    public static int PF_WANPIPE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define PF_LLC 26
     * }
     */
    public static int PF_LLC() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define PF_IB 27
     * }
     */
    public static int PF_IB() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define PF_MPLS 28
     * }
     */
    public static int PF_MPLS() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define PF_CAN 29
     * }
     */
    public static int PF_CAN() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define PF_TIPC 30
     * }
     */
    public static int PF_TIPC() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define PF_BLUETOOTH 31
     * }
     */
    public static int PF_BLUETOOTH() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define PF_IUCV 32
     * }
     */
    public static int PF_IUCV() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define PF_RXRPC 33
     * }
     */
    public static int PF_RXRPC() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define PF_ISDN 34
     * }
     */
    public static int PF_ISDN() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define PF_PHONET 35
     * }
     */
    public static int PF_PHONET() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define PF_IEEE802154 36
     * }
     */
    public static int PF_IEEE802154() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define PF_CAIF 37
     * }
     */
    public static int PF_CAIF() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define PF_ALG 38
     * }
     */
    public static int PF_ALG() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define PF_NFC 39
     * }
     */
    public static int PF_NFC() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define PF_VSOCK 40
     * }
     */
    public static int PF_VSOCK() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define PF_KCM 41
     * }
     */
    public static int PF_KCM() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define PF_QIPCRTR 42
     * }
     */
    public static int PF_QIPCRTR() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define PF_SMC 43
     * }
     */
    public static int PF_SMC() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define PF_XDP 44
     * }
     */
    public static int PF_XDP() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define PF_MCTP 45
     * }
     */
    public static int PF_MCTP() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define PF_MAX 46
     * }
     */
    public static int PF_MAX() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define SOL_RAW 255
     * }
     */
    public static int SOL_RAW() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define SOL_DECNET 261
     * }
     */
    public static int SOL_DECNET() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * #define SOL_X25 262
     * }
     */
    public static int SOL_X25() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * #define SOL_PACKET 263
     * }
     */
    public static int SOL_PACKET() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * #define SOL_ATM 264
     * }
     */
    public static int SOL_ATM() {
        return (int)264L;
    }
    /**
     * {@snippet :
     * #define SOL_AAL 265
     * }
     */
    public static int SOL_AAL() {
        return (int)265L;
    }
    /**
     * {@snippet :
     * #define SOL_IRDA 266
     * }
     */
    public static int SOL_IRDA() {
        return (int)266L;
    }
    /**
     * {@snippet :
     * #define SOL_NETBEUI 267
     * }
     */
    public static int SOL_NETBEUI() {
        return (int)267L;
    }
    /**
     * {@snippet :
     * #define SOL_LLC 268
     * }
     */
    public static int SOL_LLC() {
        return (int)268L;
    }
    /**
     * {@snippet :
     * #define SOL_DCCP 269
     * }
     */
    public static int SOL_DCCP() {
        return (int)269L;
    }
    /**
     * {@snippet :
     * #define SOL_NETLINK 270
     * }
     */
    public static int SOL_NETLINK() {
        return (int)270L;
    }
    /**
     * {@snippet :
     * #define SOL_TIPC 271
     * }
     */
    public static int SOL_TIPC() {
        return (int)271L;
    }
    /**
     * {@snippet :
     * #define SOL_RXRPC 272
     * }
     */
    public static int SOL_RXRPC() {
        return (int)272L;
    }
    /**
     * {@snippet :
     * #define SOL_PPPOL2TP 273
     * }
     */
    public static int SOL_PPPOL2TP() {
        return (int)273L;
    }
    /**
     * {@snippet :
     * #define SOL_BLUETOOTH 274
     * }
     */
    public static int SOL_BLUETOOTH() {
        return (int)274L;
    }
    /**
     * {@snippet :
     * #define SOL_PNPIPE 275
     * }
     */
    public static int SOL_PNPIPE() {
        return (int)275L;
    }
    /**
     * {@snippet :
     * #define SOL_RDS 276
     * }
     */
    public static int SOL_RDS() {
        return (int)276L;
    }
    /**
     * {@snippet :
     * #define SOL_IUCV 277
     * }
     */
    public static int SOL_IUCV() {
        return (int)277L;
    }
    /**
     * {@snippet :
     * #define SOL_CAIF 278
     * }
     */
    public static int SOL_CAIF() {
        return (int)278L;
    }
    /**
     * {@snippet :
     * #define SOL_ALG 279
     * }
     */
    public static int SOL_ALG() {
        return (int)279L;
    }
    /**
     * {@snippet :
     * #define SOL_NFC 280
     * }
     */
    public static int SOL_NFC() {
        return (int)280L;
    }
    /**
     * {@snippet :
     * #define SOL_KCM 281
     * }
     */
    public static int SOL_KCM() {
        return (int)281L;
    }
    /**
     * {@snippet :
     * #define SOL_TLS 282
     * }
     */
    public static int SOL_TLS() {
        return (int)282L;
    }
    /**
     * {@snippet :
     * #define SOL_XDP 283
     * }
     */
    public static int SOL_XDP() {
        return (int)283L;
    }
    /**
     * {@snippet :
     * #define SOL_MPTCP 284
     * }
     */
    public static int SOL_MPTCP() {
        return (int)284L;
    }
    /**
     * {@snippet :
     * #define SOL_MCTP 285
     * }
     */
    public static int SOL_MCTP() {
        return (int)285L;
    }
    /**
     * {@snippet :
     * #define SOL_SMC 286
     * }
     */
    public static int SOL_SMC() {
        return (int)286L;
    }
    /**
     * {@snippet :
     * #define SOMAXCONN 4096
     * }
     */
    public static int SOMAXCONN() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define _BITS_SOCKADDR_H 1
     * }
     */
    public static int _BITS_SOCKADDR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SS_SIZE 128
     * }
     */
    public static int _SS_SIZE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __BITS_PER_LONG 64
     * }
     */
    public static int __BITS_PER_LONG() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FIOSETOWN 35073
     * }
     */
    public static int FIOSETOWN() {
        return (int)35073L;
    }
    /**
     * {@snippet :
     * #define SIOCSPGRP 35074
     * }
     */
    public static int SIOCSPGRP() {
        return (int)35074L;
    }
    /**
     * {@snippet :
     * #define FIOGETOWN 35075
     * }
     */
    public static int FIOGETOWN() {
        return (int)35075L;
    }
    /**
     * {@snippet :
     * #define SIOCGPGRP 35076
     * }
     */
    public static int SIOCGPGRP() {
        return (int)35076L;
    }
    /**
     * {@snippet :
     * #define SIOCATMARK 35077
     * }
     */
    public static int SIOCATMARK() {
        return (int)35077L;
    }
    /**
     * {@snippet :
     * #define SIOCGSTAMP_OLD 35078
     * }
     */
    public static int SIOCGSTAMP_OLD() {
        return (int)35078L;
    }
    /**
     * {@snippet :
     * #define SIOCGSTAMPNS_OLD 35079
     * }
     */
    public static int SIOCGSTAMPNS_OLD() {
        return (int)35079L;
    }
    /**
     * {@snippet :
     * #define SOL_SOCKET 1
     * }
     */
    public static int SOL_SOCKET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SO_DEBUG 1
     * }
     */
    public static int SO_DEBUG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SO_REUSEADDR 2
     * }
     */
    public static int SO_REUSEADDR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SO_TYPE 3
     * }
     */
    public static int SO_TYPE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SO_ERROR 4
     * }
     */
    public static int SO_ERROR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SO_DONTROUTE 5
     * }
     */
    public static int SO_DONTROUTE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SO_BROADCAST 6
     * }
     */
    public static int SO_BROADCAST() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define SO_SNDBUF 7
     * }
     */
    public static int SO_SNDBUF() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define SO_RCVBUF 8
     * }
     */
    public static int SO_RCVBUF() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SO_SNDBUFFORCE 32
     * }
     */
    public static int SO_SNDBUFFORCE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SO_RCVBUFFORCE 33
     * }
     */
    public static int SO_RCVBUFFORCE() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define SO_KEEPALIVE 9
     * }
     */
    public static int SO_KEEPALIVE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define SO_OOBINLINE 10
     * }
     */
    public static int SO_OOBINLINE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define SO_NO_CHECK 11
     * }
     */
    public static int SO_NO_CHECK() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define SO_PRIORITY 12
     * }
     */
    public static int SO_PRIORITY() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define SO_LINGER 13
     * }
     */
    public static int SO_LINGER() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define SO_BSDCOMPAT 14
     * }
     */
    public static int SO_BSDCOMPAT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define SO_REUSEPORT 15
     * }
     */
    public static int SO_REUSEPORT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define SO_PASSCRED 16
     * }
     */
    public static int SO_PASSCRED() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SO_PEERCRED 17
     * }
     */
    public static int SO_PEERCRED() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define SO_RCVLOWAT 18
     * }
     */
    public static int SO_RCVLOWAT() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define SO_SNDLOWAT 19
     * }
     */
    public static int SO_SNDLOWAT() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define SO_RCVTIMEO_OLD 20
     * }
     */
    public static int SO_RCVTIMEO_OLD() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define SO_SNDTIMEO_OLD 21
     * }
     */
    public static int SO_SNDTIMEO_OLD() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define SO_SECURITY_AUTHENTICATION 22
     * }
     */
    public static int SO_SECURITY_AUTHENTICATION() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define SO_SECURITY_ENCRYPTION_TRANSPORT 23
     * }
     */
    public static int SO_SECURITY_ENCRYPTION_TRANSPORT() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define SO_SECURITY_ENCRYPTION_NETWORK 24
     * }
     */
    public static int SO_SECURITY_ENCRYPTION_NETWORK() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define SO_BINDTODEVICE 25
     * }
     */
    public static int SO_BINDTODEVICE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define SO_ATTACH_FILTER 26
     * }
     */
    public static int SO_ATTACH_FILTER() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define SO_DETACH_FILTER 27
     * }
     */
    public static int SO_DETACH_FILTER() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define SO_PEERNAME 28
     * }
     */
    public static int SO_PEERNAME() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define SO_ACCEPTCONN 30
     * }
     */
    public static int SO_ACCEPTCONN() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define SO_PEERSEC 31
     * }
     */
    public static int SO_PEERSEC() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define SO_PASSSEC 34
     * }
     */
    public static int SO_PASSSEC() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define SO_MARK 36
     * }
     */
    public static int SO_MARK() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define SO_PROTOCOL 38
     * }
     */
    public static int SO_PROTOCOL() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define SO_DOMAIN 39
     * }
     */
    public static int SO_DOMAIN() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define SO_RXQ_OVFL 40
     * }
     */
    public static int SO_RXQ_OVFL() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define SO_WIFI_STATUS 41
     * }
     */
    public static int SO_WIFI_STATUS() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define SO_PEEK_OFF 42
     * }
     */
    public static int SO_PEEK_OFF() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define SO_NOFCS 43
     * }
     */
    public static int SO_NOFCS() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define SO_LOCK_FILTER 44
     * }
     */
    public static int SO_LOCK_FILTER() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define SO_SELECT_ERR_QUEUE 45
     * }
     */
    public static int SO_SELECT_ERR_QUEUE() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define SO_BUSY_POLL 46
     * }
     */
    public static int SO_BUSY_POLL() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define SO_MAX_PACING_RATE 47
     * }
     */
    public static int SO_MAX_PACING_RATE() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define SO_BPF_EXTENSIONS 48
     * }
     */
    public static int SO_BPF_EXTENSIONS() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define SO_INCOMING_CPU 49
     * }
     */
    public static int SO_INCOMING_CPU() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define SO_ATTACH_BPF 50
     * }
     */
    public static int SO_ATTACH_BPF() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define SO_ATTACH_REUSEPORT_CBPF 51
     * }
     */
    public static int SO_ATTACH_REUSEPORT_CBPF() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define SO_ATTACH_REUSEPORT_EBPF 52
     * }
     */
    public static int SO_ATTACH_REUSEPORT_EBPF() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define SO_CNX_ADVICE 53
     * }
     */
    public static int SO_CNX_ADVICE() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define SCM_TIMESTAMPING_OPT_STATS 54
     * }
     */
    public static int SCM_TIMESTAMPING_OPT_STATS() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define SO_MEMINFO 55
     * }
     */
    public static int SO_MEMINFO() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define SO_INCOMING_NAPI_ID 56
     * }
     */
    public static int SO_INCOMING_NAPI_ID() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define SO_COOKIE 57
     * }
     */
    public static int SO_COOKIE() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define SCM_TIMESTAMPING_PKTINFO 58
     * }
     */
    public static int SCM_TIMESTAMPING_PKTINFO() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define SO_PEERGROUPS 59
     * }
     */
    public static int SO_PEERGROUPS() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define SO_ZEROCOPY 60
     * }
     */
    public static int SO_ZEROCOPY() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define SO_TXTIME 61
     * }
     */
    public static int SO_TXTIME() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define SO_BINDTOIFINDEX 62
     * }
     */
    public static int SO_BINDTOIFINDEX() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMP_OLD 29
     * }
     */
    public static int SO_TIMESTAMP_OLD() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMPNS_OLD 35
     * }
     */
    public static int SO_TIMESTAMPNS_OLD() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMPING_OLD 37
     * }
     */
    public static int SO_TIMESTAMPING_OLD() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMP_NEW 63
     * }
     */
    public static int SO_TIMESTAMP_NEW() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMPNS_NEW 64
     * }
     */
    public static int SO_TIMESTAMPNS_NEW() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMPING_NEW 65
     * }
     */
    public static int SO_TIMESTAMPING_NEW() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define SO_RCVTIMEO_NEW 66
     * }
     */
    public static int SO_RCVTIMEO_NEW() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define SO_SNDTIMEO_NEW 67
     * }
     */
    public static int SO_SNDTIMEO_NEW() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define SO_DETACH_REUSEPORT_BPF 68
     * }
     */
    public static int SO_DETACH_REUSEPORT_BPF() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * #define SO_PREFER_BUSY_POLL 69
     * }
     */
    public static int SO_PREFER_BUSY_POLL() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * #define SO_BUSY_POLL_BUDGET 70
     * }
     */
    public static int SO_BUSY_POLL_BUDGET() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define SO_NETNS_COOKIE 71
     * }
     */
    public static int SO_NETNS_COOKIE() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * #define SO_BUF_LOCK 72
     * }
     */
    public static int SO_BUF_LOCK() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * #define SO_RESERVE_MEM 73
     * }
     */
    public static int SO_RESERVE_MEM() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * #define SO_TXREHASH 74
     * }
     */
    public static int SO_TXREHASH() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define SO_RCVMARK 75
     * }
     */
    public static int SO_RCVMARK() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define __osockaddr_defined 1
     * }
     */
    public static int __osockaddr_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ARPA_INET_H 1
     * }
     */
    public static int _ARPA_INET_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _NETINET_IN_H 1
     * }
     */
    public static int _NETINET_IN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_KERNEL_IPV6_DEFS 0
     * }
     */
    public static int __USE_KERNEL_IPV6_DEFS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IP_OPTIONS 4
     * }
     */
    public static int IP_OPTIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IP_HDRINCL 3
     * }
     */
    public static int IP_HDRINCL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IP_TOS 1
     * }
     */
    public static int IP_TOS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IP_TTL 2
     * }
     */
    public static int IP_TTL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IP_RECVOPTS 6
     * }
     */
    public static int IP_RECVOPTS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define IP_RETOPTS 7
     * }
     */
    public static int IP_RETOPTS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define IP_MULTICAST_IF 32
     * }
     */
    public static int IP_MULTICAST_IF() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define IP_MULTICAST_TTL 33
     * }
     */
    public static int IP_MULTICAST_TTL() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define IP_MULTICAST_LOOP 34
     * }
     */
    public static int IP_MULTICAST_LOOP() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define IP_ADD_MEMBERSHIP 35
     * }
     */
    public static int IP_ADD_MEMBERSHIP() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define IP_DROP_MEMBERSHIP 36
     * }
     */
    public static int IP_DROP_MEMBERSHIP() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define IP_UNBLOCK_SOURCE 37
     * }
     */
    public static int IP_UNBLOCK_SOURCE() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define IP_BLOCK_SOURCE 38
     * }
     */
    public static int IP_BLOCK_SOURCE() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define IP_ADD_SOURCE_MEMBERSHIP 39
     * }
     */
    public static int IP_ADD_SOURCE_MEMBERSHIP() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define IP_DROP_SOURCE_MEMBERSHIP 40
     * }
     */
    public static int IP_DROP_SOURCE_MEMBERSHIP() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define IP_MSFILTER 41
     * }
     */
    public static int IP_MSFILTER() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define MCAST_JOIN_GROUP 42
     * }
     */
    public static int MCAST_JOIN_GROUP() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define MCAST_BLOCK_SOURCE 43
     * }
     */
    public static int MCAST_BLOCK_SOURCE() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define MCAST_UNBLOCK_SOURCE 44
     * }
     */
    public static int MCAST_UNBLOCK_SOURCE() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define MCAST_LEAVE_GROUP 45
     * }
     */
    public static int MCAST_LEAVE_GROUP() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define MCAST_JOIN_SOURCE_GROUP 46
     * }
     */
    public static int MCAST_JOIN_SOURCE_GROUP() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define MCAST_LEAVE_SOURCE_GROUP 47
     * }
     */
    public static int MCAST_LEAVE_SOURCE_GROUP() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define MCAST_MSFILTER 48
     * }
     */
    public static int MCAST_MSFILTER() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define IP_MULTICAST_ALL 49
     * }
     */
    public static int IP_MULTICAST_ALL() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define IP_UNICAST_IF 50
     * }
     */
    public static int IP_UNICAST_IF() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define MCAST_EXCLUDE 0
     * }
     */
    public static int MCAST_EXCLUDE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MCAST_INCLUDE 1
     * }
     */
    public static int MCAST_INCLUDE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IP_ROUTER_ALERT 5
     * }
     */
    public static int IP_ROUTER_ALERT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define IP_PKTINFO 8
     * }
     */
    public static int IP_PKTINFO() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IP_PKTOPTIONS 9
     * }
     */
    public static int IP_PKTOPTIONS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC 10
     * }
     */
    public static int IP_PMTUDISC() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define IP_MTU_DISCOVER 10
     * }
     */
    public static int IP_MTU_DISCOVER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define IP_RECVERR 11
     * }
     */
    public static int IP_RECVERR() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define IP_RECVTTL 12
     * }
     */
    public static int IP_RECVTTL() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define IP_RECVTOS 13
     * }
     */
    public static int IP_RECVTOS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define IP_MTU 14
     * }
     */
    public static int IP_MTU() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define IP_FREEBIND 15
     * }
     */
    public static int IP_FREEBIND() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define IP_IPSEC_POLICY 16
     * }
     */
    public static int IP_IPSEC_POLICY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IP_XFRM_POLICY 17
     * }
     */
    public static int IP_XFRM_POLICY() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define IP_PASSSEC 18
     * }
     */
    public static int IP_PASSSEC() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define IP_TRANSPARENT 19
     * }
     */
    public static int IP_TRANSPARENT() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define IP_ORIGDSTADDR 20
     * }
     */
    public static int IP_ORIGDSTADDR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define IP_MINTTL 21
     * }
     */
    public static int IP_MINTTL() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define IP_NODEFRAG 22
     * }
     */
    public static int IP_NODEFRAG() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define IP_CHECKSUM 23
     * }
     */
    public static int IP_CHECKSUM() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define IP_BIND_ADDRESS_NO_PORT 24
     * }
     */
    public static int IP_BIND_ADDRESS_NO_PORT() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define IP_RECVFRAGSIZE 25
     * }
     */
    public static int IP_RECVFRAGSIZE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define IP_RECVERR_RFC4884 26
     * }
     */
    public static int IP_RECVERR_RFC4884() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC_DONT 0
     * }
     */
    public static int IP_PMTUDISC_DONT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC_WANT 1
     * }
     */
    public static int IP_PMTUDISC_WANT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC_DO 2
     * }
     */
    public static int IP_PMTUDISC_DO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC_PROBE 3
     * }
     */
    public static int IP_PMTUDISC_PROBE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC_INTERFACE 4
     * }
     */
    public static int IP_PMTUDISC_INTERFACE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IP_PMTUDISC_OMIT 5
     * }
     */
    public static int IP_PMTUDISC_OMIT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define IP_LOCAL_PORT_RANGE 51
     * }
     */
    public static int IP_LOCAL_PORT_RANGE() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define SOL_IP 0
     * }
     */
    public static int SOL_IP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IP_DEFAULT_MULTICAST_TTL 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_TTL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IP_DEFAULT_MULTICAST_LOOP 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_LOOP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IP_MAX_MEMBERSHIPS 20
     * }
     */
    public static int IP_MAX_MEMBERSHIPS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define IPV6_ADDRFORM 1
     * }
     */
    public static int IPV6_ADDRFORM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IPV6_2292PKTINFO 2
     * }
     */
    public static int IPV6_2292PKTINFO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IPV6_2292HOPOPTS 3
     * }
     */
    public static int IPV6_2292HOPOPTS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IPV6_2292DSTOPTS 4
     * }
     */
    public static int IPV6_2292DSTOPTS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IPV6_2292RTHDR 5
     * }
     */
    public static int IPV6_2292RTHDR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define IPV6_2292PKTOPTIONS 6
     * }
     */
    public static int IPV6_2292PKTOPTIONS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define IPV6_CHECKSUM 7
     * }
     */
    public static int IPV6_CHECKSUM() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define IPV6_2292HOPLIMIT 8
     * }
     */
    public static int IPV6_2292HOPLIMIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IPV6_NEXTHOP 9
     * }
     */
    public static int IPV6_NEXTHOP() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define IPV6_AUTHHDR 10
     * }
     */
    public static int IPV6_AUTHHDR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define IPV6_UNICAST_HOPS 16
     * }
     */
    public static int IPV6_UNICAST_HOPS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IPV6_MULTICAST_IF 17
     * }
     */
    public static int IPV6_MULTICAST_IF() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define IPV6_MULTICAST_HOPS 18
     * }
     */
    public static int IPV6_MULTICAST_HOPS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define IPV6_MULTICAST_LOOP 19
     * }
     */
    public static int IPV6_MULTICAST_LOOP() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define IPV6_JOIN_GROUP 20
     * }
     */
    public static int IPV6_JOIN_GROUP() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define IPV6_LEAVE_GROUP 21
     * }
     */
    public static int IPV6_LEAVE_GROUP() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define IPV6_ROUTER_ALERT 22
     * }
     */
    public static int IPV6_ROUTER_ALERT() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define IPV6_MTU_DISCOVER 23
     * }
     */
    public static int IPV6_MTU_DISCOVER() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define IPV6_MTU 24
     * }
     */
    public static int IPV6_MTU() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVERR 25
     * }
     */
    public static int IPV6_RECVERR() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define IPV6_V6ONLY 26
     * }
     */
    public static int IPV6_V6ONLY() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define IPV6_JOIN_ANYCAST 27
     * }
     */
    public static int IPV6_JOIN_ANYCAST() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define IPV6_LEAVE_ANYCAST 28
     * }
     */
    public static int IPV6_LEAVE_ANYCAST() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define IPV6_MULTICAST_ALL 29
     * }
     */
    public static int IPV6_MULTICAST_ALL() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define IPV6_ROUTER_ALERT_ISOLATE 30
     * }
     */
    public static int IPV6_ROUTER_ALERT_ISOLATE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVERR_RFC4884 31
     * }
     */
    public static int IPV6_RECVERR_RFC4884() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define IPV6_IPSEC_POLICY 34
     * }
     */
    public static int IPV6_IPSEC_POLICY() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define IPV6_XFRM_POLICY 35
     * }
     */
    public static int IPV6_XFRM_POLICY() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define IPV6_HDRINCL 36
     * }
     */
    public static int IPV6_HDRINCL() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVPKTINFO 49
     * }
     */
    public static int IPV6_RECVPKTINFO() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define IPV6_PKTINFO 50
     * }
     */
    public static int IPV6_PKTINFO() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVHOPLIMIT 51
     * }
     */
    public static int IPV6_RECVHOPLIMIT() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define IPV6_HOPLIMIT 52
     * }
     */
    public static int IPV6_HOPLIMIT() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVHOPOPTS 53
     * }
     */
    public static int IPV6_RECVHOPOPTS() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define IPV6_HOPOPTS 54
     * }
     */
    public static int IPV6_HOPOPTS() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define IPV6_RTHDRDSTOPTS 55
     * }
     */
    public static int IPV6_RTHDRDSTOPTS() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVRTHDR 56
     * }
     */
    public static int IPV6_RECVRTHDR() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define IPV6_RTHDR 57
     * }
     */
    public static int IPV6_RTHDR() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVDSTOPTS 58
     * }
     */
    public static int IPV6_RECVDSTOPTS() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define IPV6_DSTOPTS 59
     * }
     */
    public static int IPV6_DSTOPTS() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVPATHMTU 60
     * }
     */
    public static int IPV6_RECVPATHMTU() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define IPV6_PATHMTU 61
     * }
     */
    public static int IPV6_PATHMTU() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define IPV6_DONTFRAG 62
     * }
     */
    public static int IPV6_DONTFRAG() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVTCLASS 66
     * }
     */
    public static int IPV6_RECVTCLASS() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define IPV6_TCLASS 67
     * }
     */
    public static int IPV6_TCLASS() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define IPV6_AUTOFLOWLABEL 70
     * }
     */
    public static int IPV6_AUTOFLOWLABEL() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define IPV6_ADDR_PREFERENCES 72
     * }
     */
    public static int IPV6_ADDR_PREFERENCES() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * #define IPV6_MINHOPCOUNT 73
     * }
     */
    public static int IPV6_MINHOPCOUNT() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * #define IPV6_ORIGDSTADDR 74
     * }
     */
    public static int IPV6_ORIGDSTADDR() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define IPV6_TRANSPARENT 75
     * }
     */
    public static int IPV6_TRANSPARENT() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define IPV6_UNICAST_IF 76
     * }
     */
    public static int IPV6_UNICAST_IF() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVFRAGSIZE 77
     * }
     */
    public static int IPV6_RECVFRAGSIZE() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * #define IPV6_FREEBIND 78
     * }
     */
    public static int IPV6_FREEBIND() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * #define IPV6_PMTUDISC_DONT 0
     * }
     */
    public static int IPV6_PMTUDISC_DONT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IPV6_PMTUDISC_WANT 1
     * }
     */
    public static int IPV6_PMTUDISC_WANT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IPV6_PMTUDISC_DO 2
     * }
     */
    public static int IPV6_PMTUDISC_DO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IPV6_PMTUDISC_PROBE 3
     * }
     */
    public static int IPV6_PMTUDISC_PROBE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IPV6_PMTUDISC_INTERFACE 4
     * }
     */
    public static int IPV6_PMTUDISC_INTERFACE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IPV6_PMTUDISC_OMIT 5
     * }
     */
    public static int IPV6_PMTUDISC_OMIT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SOL_IPV6 41
     * }
     */
    public static int SOL_IPV6() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define SOL_ICMPV6 58
     * }
     */
    public static int SOL_ICMPV6() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define IPV6_RTHDR_LOOSE 0
     * }
     */
    public static int IPV6_RTHDR_LOOSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IPV6_RTHDR_STRICT 1
     * }
     */
    public static int IPV6_RTHDR_STRICT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IPV6_RTHDR_TYPE_0 0
     * }
     */
    public static int IPV6_RTHDR_TYPE_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSA_NSHIFT 24
     * }
     */
    public static int IN_CLASSA_NSHIFT() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSA_MAX 128
     * }
     */
    public static int IN_CLASSA_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSB_NSHIFT 16
     * }
     */
    public static int IN_CLASSB_NSHIFT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSB_MAX 65536
     * }
     */
    public static int IN_CLASSB_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSC_NSHIFT 8
     * }
     */
    public static int IN_CLASSC_NSHIFT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IN_LOOPBACKNET 127
     * }
     */
    public static int IN_LOOPBACKNET() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INET_ADDRSTRLEN 16
     * }
     */
    public static int INET_ADDRSTRLEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define INET6_ADDRSTRLEN 46
     * }
     */
    public static int INET6_ADDRSTRLEN() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define _UNISTD_H 1
     * }
     */
    public static int _UNISTD_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_VERSION 700
     * }
     */
    public static int _XOPEN_VERSION() {
        return (int)700L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XCU_VERSION 4
     * }
     */
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XPG2 1
     * }
     */
    public static int _XOPEN_XPG2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XPG3 1
     * }
     */
    public static int _XOPEN_XPG3() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XPG4 1
     * }
     */
    public static int _XOPEN_XPG4() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_UNIX 1
     * }
     */
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_ENH_I18N 1
     * }
     */
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_LEGACY 1
     * }
     */
    public static int _XOPEN_LEGACY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_POSIX_OPT_H 1
     * }
     */
    public static int _BITS_POSIX_OPT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_JOB_CONTROL 1
     * }
     */
    public static int _POSIX_JOB_CONTROL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SAVED_IDS 1
     * }
     */
    public static int _POSIX_SAVED_IDS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CHOWN_RESTRICTED 0
     * }
     */
    public static int _POSIX_CHOWN_RESTRICTED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NO_TRUNC 1
     * }
     */
    public static int _POSIX_NO_TRUNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_REALTIME 1
     * }
     */
    public static int _XOPEN_REALTIME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_REALTIME_THREADS 1
     * }
     */
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_SHM 1
     * }
     */
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_REENTRANT_FUNCTIONS 1
     * }
     */
    public static int _POSIX_REENTRANT_FUNCTIONS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ASYNC_IO 1
     * }
     */
    public static int _POSIX_ASYNC_IO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS_ASYNCHRONOUS_IO 1
     * }
     */
    public static int _LFS_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS64_ASYNCHRONOUS_IO 1
     * }
     */
    public static int _LFS64_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS_LARGEFILE 1
     * }
     */
    public static int _LFS_LARGEFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS64_LARGEFILE 1
     * }
     */
    public static int _LFS64_LARGEFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _LFS64_STDIO 1
     * }
     */
    public static int _LFS64_STDIO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CPUTIME 0
     * }
     */
    public static int _POSIX_CPUTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_CPUTIME 0
     * }
     */
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_REGEXP 1
     * }
     */
    public static int _POSIX_REGEXP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SHELL 1
     * }
     */
    public static int _POSIX_SHELL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MONOTONIC_CLOCK 0
     * }
     */
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V7_LP64_OFF64 1
     * }
     */
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V6_LP64_OFF64 1
     * }
     */
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _XBS5_LP64_OFF64 1
     * }
     */
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDIN_FILENO 0
     * }
     */
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define STDOUT_FILENO 1
     * }
     */
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDERR_FILENO 2
     * }
     */
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define R_OK 4
     * }
     */
    public static int R_OK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define W_OK 2
     * }
     */
    public static int W_OK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _GETOPT_POSIX_H 1
     * }
     */
    public static int _GETOPT_POSIX_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _GETOPT_CORE_H 1
     * }
     */
    public static int _GETOPT_CORE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ENET_VERSION_MAJOR 1
     * }
     */
    public static int ENET_VERSION_MAJOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ENET_VERSION_MINOR 3
     * }
     */
    public static int ENET_VERSION_MINOR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ENET_VERSION_PATCH 17
     * }
     */
    public static int ENET_VERSION_PATCH() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define ENET_HOST_ANY 0
     * }
     */
    public static int ENET_HOST_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ENET_PORT_ANY 0
     * }
     */
    public static int ENET_PORT_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = JAVA_DOUBLE;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * size_t __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$5,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$3,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$6,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$4,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final AddressLayout __timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final AddressLayout __caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final AddressLayout caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final AddressLayout timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = JAVA_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = JAVA_INT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, size_t __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int32_t* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, size_t __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$6,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$6,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"arc4random");
    }
    /**
     * {@snippet :
     * __uint32_t arc4random();
     * }
     */
    public static int arc4random() {
        var mh$ = arc4random$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"arc4random_buf");
    }
    /**
     * {@snippet :
     * void arc4random_buf(void* __buf, size_t __size);
     * }
     */
    public static void arc4random_buf(MemorySegment __buf, long __size) {
        var mh$ = arc4random_buf$MH();
        try {
            mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_uniform$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$6,"arc4random_uniform");
    }
    /**
     * {@snippet :
     * __uint32_t arc4random_uniform(__uint32_t __upper_bound);
     * }
     */
    public static int arc4random_uniform(int __upper_bound) {
        var mh$ = arc4random_uniform$MH();
        try {
            return (int)mh$.invokeExact(__upper_bound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(size_t __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(size_t __nmemb, size_t __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, size_t __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, size_t __nmemb, size_t __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(size_t __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(size_t __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, size_t __alignment, size_t __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(size_t __alignment, size_t __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$6,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$6,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"div");
    }
    /**
     * {@snippet :
     * div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"ldiv");
    }
    /**
     * {@snippet :
     * ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"lldiv");
    }
    /**
     * {@snippet :
     * lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$6,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, size_t __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, size_t __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, size_t __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(wchar_t* __pwc, char* __s, size_t __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, wchar_t __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"mbstowcs");
    }
    /**
     * {@snippet :
     * size_t mbstowcs(wchar_t* __pwcs, char* __s, size_t __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"wcstombs");
    }
    /**
     * {@snippet :
     * size_t wcstombs(char* __s, const wchar_t* __pwcs, size_t __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"gettimeofday");
    }
    /**
     * {@snippet :
     * int gettimeofday(struct timeval* __tv, void* __tz);
     * }
     */
    public static int gettimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = gettimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"settimeofday");
    }
    /**
     * {@snippet :
     * int settimeofday(struct timeval* __tv, struct timezone* __tz);
     * }
     */
    public static int settimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = settimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"adjtime");
    }
    /**
     * {@snippet :
     * int adjtime(struct timeval* __delta, struct timeval* __olddelta);
     * }
     */
    public static int adjtime(MemorySegment __delta, MemorySegment __olddelta) {
        var mh$ = adjtime$MH();
        try {
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_REAL = 0;
     * }
     */
    public static int ITIMER_REAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_VIRTUAL = 1;
     * }
     */
    public static int ITIMER_VIRTUAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_PROF = 2;
     * }
     */
    public static int ITIMER_PROF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef int __itimer_which_t;
     * }
     */
    public static final OfInt __itimer_which_t = JAVA_INT;
    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"getitimer");
    }
    /**
     * {@snippet :
     * int getitimer(__itimer_which_t __which, struct itimerval* __value);
     * }
     */
    public static int getitimer(int __which, MemorySegment __value) {
        var mh$ = getitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"setitimer");
    }
    /**
     * {@snippet :
     * int setitimer(__itimer_which_t __which, struct itimerval* __new, struct itimerval* __old);
     * }
     */
    public static int setitimer(int __which, MemorySegment __new, MemorySegment __old) {
        var mh$ = setitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"utimes");
    }
    /**
     * {@snippet :
     * int utimes(char* __file, struct timeval __tvp[2]);
     * }
     */
    public static int utimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = utimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"lutimes");
    }
    /**
     * {@snippet :
     * int lutimes(char* __file, struct timeval __tvp[2]);
     * }
     */
    public static int lutimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = lutimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"futimes");
    }
    /**
     * {@snippet :
     * int futimes(int __fd, struct timeval __tvp[2]);
     * }
     */
    public static int futimes(int __fd, MemorySegment __tvp) {
        var mh$ = futimes$MH();
        try {
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int socklen_t;
     * }
     */
    public static final OfInt socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * enum __socket_type.SOCK_STREAM = 1;
     * }
     */
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_DGRAM = 2;
     * }
     */
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_RAW = 3;
     * }
     */
    public static int SOCK_RAW() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_RDM = 4;
     * }
     */
    public static int SOCK_RDM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_SEQPACKET = 5;
     * }
     */
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_DCCP = 6;
     * }
     */
    public static int SOCK_DCCP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_PACKET = 10;
     * }
     */
    public static int SOCK_PACKET() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_CLOEXEC = 524288;
     * }
     */
    public static int SOCK_CLOEXEC() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum __socket_type.SOCK_NONBLOCK = 2048;
     * }
     */
    public static int SOCK_NONBLOCK() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * typedef unsigned short sa_family_t;
     * }
     */
    public static final OfShort sa_family_t = JAVA_SHORT;
    /**
     * {@snippet :
     * enum .MSG_OOB = 1;
     * }
     */
    public static int MSG_OOB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MSG_PEEK = 2;
     * }
     */
    public static int MSG_PEEK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MSG_DONTROUTE = 4;
     * }
     */
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MSG_CTRUNC = 8;
     * }
     */
    public static int MSG_CTRUNC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .MSG_PROXY = 16;
     * }
     */
    public static int MSG_PROXY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .MSG_TRUNC = 32;
     * }
     */
    public static int MSG_TRUNC() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .MSG_DONTWAIT = 64;
     * }
     */
    public static int MSG_DONTWAIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .MSG_EOR = 128;
     * }
     */
    public static int MSG_EOR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .MSG_WAITALL = 256;
     * }
     */
    public static int MSG_WAITALL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .MSG_FIN = 512;
     * }
     */
    public static int MSG_FIN() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .MSG_SYN = 1024;
     * }
     */
    public static int MSG_SYN() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .MSG_CONFIRM = 2048;
     * }
     */
    public static int MSG_CONFIRM() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .MSG_RST = 4096;
     * }
     */
    public static int MSG_RST() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .MSG_ERRQUEUE = 8192;
     * }
     */
    public static int MSG_ERRQUEUE() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .MSG_NOSIGNAL = 16384;
     * }
     */
    public static int MSG_NOSIGNAL() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .MSG_MORE = 32768;
     * }
     */
    public static int MSG_MORE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .MSG_WAITFORONE = 65536;
     * }
     */
    public static int MSG_WAITFORONE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .MSG_BATCH = 262144;
     * }
     */
    public static int MSG_BATCH() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum .MSG_ZEROCOPY = 67108864;
     * }
     */
    public static int MSG_ZEROCOPY() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum .MSG_FASTOPEN = 536870912;
     * }
     */
    public static int MSG_FASTOPEN() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * enum .MSG_CMSG_CLOEXEC = 1073741824;
     * }
     */
    public static int MSG_CMSG_CLOEXEC() {
        return (int)1073741824L;
    }
    public static MethodHandle __cmsg_nxthdr$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"__cmsg_nxthdr");
    }
    /**
     * {@snippet :
     * struct cmsghdr* __cmsg_nxthdr(struct msghdr* __mhdr, struct cmsghdr* __cmsg);
     * }
     */
    public static MemorySegment __cmsg_nxthdr(MemorySegment __mhdr, MemorySegment __cmsg) {
        var mh$ = __cmsg_nxthdr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .SCM_RIGHTS = 1;
     * }
     */
    public static int SCM_RIGHTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef int __kernel_key_t;
     * }
     */
    public static final OfInt __kernel_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_mqd_t;
     * }
     */
    public static final OfInt __kernel_mqd_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_old_uid_t;
     * }
     */
    public static final OfShort __kernel_old_uid_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_old_gid_t;
     * }
     */
    public static final OfShort __kernel_old_gid_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_old_dev_t;
     * }
     */
    public static final OfLong __kernel_old_dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_long_t;
     * }
     */
    public static final OfLong __kernel_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_ulong_t;
     * }
     */
    public static final OfLong __kernel_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_ino_t;
     * }
     */
    public static final OfLong __kernel_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_mode_t;
     * }
     */
    public static final OfInt __kernel_mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_pid_t;
     * }
     */
    public static final OfInt __kernel_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_ipc_pid_t;
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_uid_t;
     * }
     */
    public static final OfInt __kernel_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_gid_t;
     * }
     */
    public static final OfInt __kernel_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __kernel_suseconds_t;
     * }
     */
    public static final OfLong __kernel_suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __kernel_daddr_t;
     * }
     */
    public static final OfInt __kernel_daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_uid32_t;
     * }
     */
    public static final OfInt __kernel_uid32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_gid32_t;
     * }
     */
    public static final OfInt __kernel_gid32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_size_t;
     * }
     */
    public static final OfLong __kernel_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_ssize_t;
     * }
     */
    public static final OfLong __kernel_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_ptrdiff_t;
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_off_t;
     * }
     */
    public static final OfLong __kernel_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __kernel_loff_t;
     * }
     */
    public static final OfLong __kernel_loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_old_time_t;
     * }
     */
    public static final OfLong __kernel_old_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_time_t;
     * }
     */
    public static final OfLong __kernel_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __kernel_time64_t;
     * }
     */
    public static final OfLong __kernel_time64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_clock_t;
     * }
     */
    public static final OfLong __kernel_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __kernel_timer_t;
     * }
     */
    public static final OfInt __kernel_timer_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_clockid_t;
     * }
     */
    public static final OfInt __kernel_clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* __kernel_caddr_t;
     * }
     */
    public static final AddressLayout __kernel_caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_uid16_t;
     * }
     */
    public static final OfShort __kernel_uid16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_gid16_t;
     * }
     */
    public static final OfShort __kernel_gid16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * enum .SHUT_RD = 0;
     * }
     */
    public static int SHUT_RD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SHUT_WR = 1;
     * }
     */
    public static int SHUT_WR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SHUT_RDWR = 2;
     * }
     */
    public static int SHUT_RDWR() {
        return (int)2L;
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"socket");
    }
    /**
     * {@snippet :
     * int socket(int __domain, int __type, int __protocol);
     * }
     */
    public static int socket(int __domain, int __type, int __protocol) {
        var mh$ = socket$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socketpair$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"socketpair");
    }
    /**
     * {@snippet :
     * int socketpair(int __domain, int __type, int __protocol, int __fds[2]);
     * }
     */
    public static int socketpair(int __domain, int __type, int __protocol, MemorySegment __fds) {
        var mh$ = socketpair$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$6,"bind");
    }
    /**
     * {@snippet :
     * int bind(int __fd, struct sockaddr* __addr, socklen_t __len);
     * }
     */
    public static int bind(int __fd, MemorySegment __addr, int __len) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"getsockname");
    }
    /**
     * {@snippet :
     * int getsockname(int __fd, struct sockaddr* __addr, socklen_t* __len);
     * }
     */
    public static int getsockname(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"connect");
    }
    /**
     * {@snippet :
     * int connect(int __fd, struct sockaddr* __addr, socklen_t __len);
     * }
     */
    public static int connect(int __fd, MemorySegment __addr, int __len) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"getpeername");
    }
    /**
     * {@snippet :
     * int getpeername(int __fd, struct sockaddr* __addr, socklen_t* __len);
     * }
     */
    public static int getpeername(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"send");
    }
    /**
     * {@snippet :
     * ssize_t send(int __fd, void* __buf, size_t __n, int __flags);
     * }
     */
    public static long send(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = send$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"recv");
    }
    /**
     * {@snippet :
     * ssize_t recv(int __fd, void* __buf, size_t __n, int __flags);
     * }
     */
    public static long recv(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = recv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"sendto");
    }
    /**
     * {@snippet :
     * ssize_t sendto(int __fd, void* __buf, size_t __n, int __flags, struct sockaddr* __addr, socklen_t __addr_len);
     * }
     */
    public static long sendto(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, int __addr_len) {
        var mh$ = sendto$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"recvfrom");
    }
    /**
     * {@snippet :
     * ssize_t recvfrom(int __fd, void* __buf, size_t __n, int __flags, struct sockaddr* __addr, socklen_t* __addr_len);
     * }
     */
    public static long recvfrom(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = recvfrom$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"sendmsg");
    }
    /**
     * {@snippet :
     * ssize_t sendmsg(int __fd, struct msghdr* __message, int __flags);
     * }
     */
    public static long sendmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = sendmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"recvmsg");
    }
    /**
     * {@snippet :
     * ssize_t recvmsg(int __fd, struct msghdr* __message, int __flags);
     * }
     */
    public static long recvmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = recvmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"getsockopt");
    }
    /**
     * {@snippet :
     * int getsockopt(int __fd, int __level, int __optname, void* __optval, socklen_t* __optlen);
     * }
     */
    public static int getsockopt(int __fd, int __level, int __optname, MemorySegment __optval, MemorySegment __optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"setsockopt");
    }
    /**
     * {@snippet :
     * int setsockopt(int __fd, int __level, int __optname, void* __optval, socklen_t __optlen);
     * }
     */
    public static int setsockopt(int __fd, int __level, int __optname, MemorySegment __optval, int __optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$6,"listen");
    }
    /**
     * {@snippet :
     * int listen(int __fd, int __n);
     * }
     */
    public static int listen(int __fd, int __n) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"accept");
    }
    /**
     * {@snippet :
     * int accept(int __fd, struct sockaddr* __addr, socklen_t* __addr_len);
     * }
     */
    public static int accept(int __fd, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = accept$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"shutdown");
    }
    /**
     * {@snippet :
     * int shutdown(int __fd, int __how);
     * }
     */
    public static int shutdown(int __fd, int __how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sockatmark$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"sockatmark");
    }
    /**
     * {@snippet :
     * int sockatmark(int __fd);
     * }
     */
    public static int sockatmark(int __fd) {
        var mh$ = sockatmark$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isfdtype$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"isfdtype");
    }
    /**
     * {@snippet :
     * int isfdtype(int __fd, int __fdtype);
     * }
     */
    public static int isfdtype(int __fd, int __fdtype) {
        var mh$ = isfdtype$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int in_addr_t;
     * }
     */
    public static final OfInt in_addr_t = JAVA_INT;
    /**
     * {@snippet :
     * enum .IPPROTO_IP = 0;
     * }
     */
    public static int IPPROTO_IP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_ICMP = 1;
     * }
     */
    public static int IPPROTO_ICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_IGMP = 2;
     * }
     */
    public static int IPPROTO_IGMP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_IPIP = 4;
     * }
     */
    public static int IPPROTO_IPIP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_TCP = 6;
     * }
     */
    public static int IPPROTO_TCP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_EGP = 8;
     * }
     */
    public static int IPPROTO_EGP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_PUP = 12;
     * }
     */
    public static int IPPROTO_PUP() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_UDP = 17;
     * }
     */
    public static int IPPROTO_UDP() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_IDP = 22;
     * }
     */
    public static int IPPROTO_IDP() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_TP = 29;
     * }
     */
    public static int IPPROTO_TP() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_DCCP = 33;
     * }
     */
    public static int IPPROTO_DCCP() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_IPV6 = 41;
     * }
     */
    public static int IPPROTO_IPV6() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_RSVP = 46;
     * }
     */
    public static int IPPROTO_RSVP() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_GRE = 47;
     * }
     */
    public static int IPPROTO_GRE() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_ESP = 50;
     * }
     */
    public static int IPPROTO_ESP() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_AH = 51;
     * }
     */
    public static int IPPROTO_AH() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_MTP = 92;
     * }
     */
    public static int IPPROTO_MTP() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_BEETPH = 94;
     * }
     */
    public static int IPPROTO_BEETPH() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_ENCAP = 98;
     * }
     */
    public static int IPPROTO_ENCAP() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_PIM = 103;
     * }
     */
    public static int IPPROTO_PIM() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_COMP = 108;
     * }
     */
    public static int IPPROTO_COMP() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_L2TP = 115;
     * }
     */
    public static int IPPROTO_L2TP() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_SCTP = 132;
     * }
     */
    public static int IPPROTO_SCTP() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_UDPLITE = 136;
     * }
     */
    public static int IPPROTO_UDPLITE() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_MPLS = 137;
     * }
     */
    public static int IPPROTO_MPLS() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_ETHERNET = 143;
     * }
     */
    public static int IPPROTO_ETHERNET() {
        return (int)143L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_RAW = 255;
     * }
     */
    public static int IPPROTO_RAW() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_MPTCP = 262;
     * }
     */
    public static int IPPROTO_MPTCP() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_MAX = 263;
     * }
     */
    public static int IPPROTO_MAX() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_HOPOPTS = 0;
     * }
     */
    public static int IPPROTO_HOPOPTS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_ROUTING = 43;
     * }
     */
    public static int IPPROTO_ROUTING() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_FRAGMENT = 44;
     * }
     */
    public static int IPPROTO_FRAGMENT() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_ICMPV6 = 58;
     * }
     */
    public static int IPPROTO_ICMPV6() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_NONE = 59;
     * }
     */
    public static int IPPROTO_NONE() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_DSTOPTS = 60;
     * }
     */
    public static int IPPROTO_DSTOPTS() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum .IPPROTO_MH = 135;
     * }
     */
    public static int IPPROTO_MH() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * typedef unsigned short in_port_t;
     * }
     */
    public static final OfShort in_port_t = JAVA_SHORT;
    /**
     * {@snippet :
     * enum .IPPORT_ECHO = 7;
     * }
     */
    public static int IPPORT_ECHO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_DISCARD = 9;
     * }
     */
    public static int IPPORT_DISCARD() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_SYSTAT = 11;
     * }
     */
    public static int IPPORT_SYSTAT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_DAYTIME = 13;
     * }
     */
    public static int IPPORT_DAYTIME() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_NETSTAT = 15;
     * }
     */
    public static int IPPORT_NETSTAT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_FTP = 21;
     * }
     */
    public static int IPPORT_FTP() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_TELNET = 23;
     * }
     */
    public static int IPPORT_TELNET() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_SMTP = 25;
     * }
     */
    public static int IPPORT_SMTP() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_TIMESERVER = 37;
     * }
     */
    public static int IPPORT_TIMESERVER() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_NAMESERVER = 42;
     * }
     */
    public static int IPPORT_NAMESERVER() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_WHOIS = 43;
     * }
     */
    public static int IPPORT_WHOIS() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_MTP = 57;
     * }
     */
    public static int IPPORT_MTP() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_TFTP = 69;
     * }
     */
    public static int IPPORT_TFTP() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_RJE = 77;
     * }
     */
    public static int IPPORT_RJE() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_FINGER = 79;
     * }
     */
    public static int IPPORT_FINGER() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_TTYLINK = 87;
     * }
     */
    public static int IPPORT_TTYLINK() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_SUPDUP = 95;
     * }
     */
    public static int IPPORT_SUPDUP() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_EXECSERVER = 512;
     * }
     */
    public static int IPPORT_EXECSERVER() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_LOGINSERVER = 513;
     * }
     */
    public static int IPPORT_LOGINSERVER() {
        return (int)513L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_CMDSERVER = 514;
     * }
     */
    public static int IPPORT_CMDSERVER() {
        return (int)514L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_EFSSERVER = 520;
     * }
     */
    public static int IPPORT_EFSSERVER() {
        return (int)520L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_BIFFUDP = 512;
     * }
     */
    public static int IPPORT_BIFFUDP() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_WHOSERVER = 513;
     * }
     */
    public static int IPPORT_WHOSERVER() {
        return (int)513L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_ROUTESERVER = 520;
     * }
     */
    public static int IPPORT_ROUTESERVER() {
        return (int)520L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_RESERVED = 1024;
     * }
     */
    public static int IPPORT_RESERVED() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .IPPORT_USERRESERVED = 5000;
     * }
     */
    public static int IPPORT_USERRESERVED() {
        return (int)5000L;
    }
    /**
     * {@snippet :
     * struct in6_addr in6addr_any;
     * }
     */
    public static MemorySegment in6addr_any$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"in6addr_any");
    }
    /**
     * {@snippet :
     * struct in6_addr in6addr_loopback;
     * }
     */
    public static MemorySegment in6addr_loopback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"in6addr_loopback");
    }
    public static MethodHandle ntohl$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"ntohl");
    }
    /**
     * {@snippet :
     * uint32_t ntohl(uint32_t __netlong);
     * }
     */
    public static int ntohl(int __netlong) {
        var mh$ = ntohl$MH();
        try {
            return (int)mh$.invokeExact(__netlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohs$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"ntohs");
    }
    /**
     * {@snippet :
     * uint16_t ntohs(uint16_t __netshort);
     * }
     */
    public static short ntohs(short __netshort) {
        var mh$ = ntohs$MH();
        try {
            return (short)mh$.invokeExact(__netshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonl$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"htonl");
    }
    /**
     * {@snippet :
     * uint32_t htonl(uint32_t __hostlong);
     * }
     */
    public static int htonl(int __hostlong) {
        var mh$ = htonl$MH();
        try {
            return (int)mh$.invokeExact(__hostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htons$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"htons");
    }
    /**
     * {@snippet :
     * uint16_t htons(uint16_t __hostshort);
     * }
     */
    public static short htons(short __hostshort) {
        var mh$ = htons$MH();
        try {
            return (short)mh$.invokeExact(__hostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bindresvport$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"bindresvport");
    }
    /**
     * {@snippet :
     * int bindresvport(int __sockfd, struct sockaddr_in* __sock_in);
     * }
     */
    public static int bindresvport(int __sockfd, MemorySegment __sock_in) {
        var mh$ = bindresvport$MH();
        try {
            return (int)mh$.invokeExact(__sockfd, __sock_in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bindresvport6$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"bindresvport6");
    }
    /**
     * {@snippet :
     * int bindresvport6(int __sockfd, struct sockaddr_in6* __sock_in);
     * }
     */
    public static int bindresvport6(int __sockfd, MemorySegment __sock_in) {
        var mh$ = bindresvport6$MH();
        try {
            return (int)mh$.invokeExact(__sockfd, __sock_in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"inet_addr");
    }
    /**
     * {@snippet :
     * in_addr_t inet_addr(char* __cp);
     * }
     */
    public static int inet_addr(MemorySegment __cp) {
        var mh$ = inet_addr$MH();
        try {
            return (int)mh$.invokeExact(__cp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_lnaof$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"inet_lnaof");
    }
    /**
     * {@snippet :
     * in_addr_t inet_lnaof(struct in_addr __in);
     * }
     */
    public static int inet_lnaof(MemorySegment __in) {
        var mh$ = inet_lnaof$MH();
        try {
            return (int)mh$.invokeExact(__in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_makeaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"inet_makeaddr");
    }
    /**
     * {@snippet :
     * struct in_addr inet_makeaddr(in_addr_t __net, in_addr_t __host);
     * }
     */
    public static MemorySegment inet_makeaddr(SegmentAllocator allocator, int __net, int __host) {
        var mh$ = inet_makeaddr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __net, __host);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_netof$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"inet_netof");
    }
    /**
     * {@snippet :
     * in_addr_t inet_netof(struct in_addr __in);
     * }
     */
    public static int inet_netof(MemorySegment __in) {
        var mh$ = inet_netof$MH();
        try {
            return (int)mh$.invokeExact(__in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_network$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"inet_network");
    }
    /**
     * {@snippet :
     * in_addr_t inet_network(char* __cp);
     * }
     */
    public static int inet_network(MemorySegment __cp) {
        var mh$ = inet_network$MH();
        try {
            return (int)mh$.invokeExact(__cp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntoa$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"inet_ntoa");
    }
    /**
     * {@snippet :
     * char* inet_ntoa(struct in_addr __in);
     * }
     */
    public static MemorySegment inet_ntoa(MemorySegment __in) {
        var mh$ = inet_ntoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_pton$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"inet_pton");
    }
    /**
     * {@snippet :
     * int inet_pton(int __af, char* __cp, void* __buf);
     * }
     */
    public static int inet_pton(int __af, MemorySegment __cp, MemorySegment __buf) {
        var mh$ = inet_pton$MH();
        try {
            return (int)mh$.invokeExact(__af, __cp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntop$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"inet_ntop");
    }
    /**
     * {@snippet :
     * char* inet_ntop(int __af, void* __cp, char* __buf, socklen_t __len);
     * }
     */
    public static MemorySegment inet_ntop(int __af, MemorySegment __cp, MemorySegment __buf, int __len) {
        var mh$ = inet_ntop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__af, __cp, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_aton$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"inet_aton");
    }
    /**
     * {@snippet :
     * int inet_aton(char* __cp, struct in_addr* __inp);
     * }
     */
    public static int inet_aton(MemorySegment __cp, MemorySegment __inp) {
        var mh$ = inet_aton$MH();
        try {
            return (int)mh$.invokeExact(__cp, __inp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_neta$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"inet_neta");
    }
    /**
     * {@snippet :
     * char* inet_neta(in_addr_t __net, char* __buf, size_t __len);
     * }
     */
    public static MemorySegment inet_neta(int __net, MemorySegment __buf, long __len) {
        var mh$ = inet_neta$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__net, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_net_ntop$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$6,"inet_net_ntop");
    }
    /**
     * {@snippet :
     * char* inet_net_ntop(int __af, void* __cp, int __bits, char* __buf, size_t __len);
     * }
     */
    public static MemorySegment inet_net_ntop(int __af, MemorySegment __cp, int __bits, MemorySegment __buf, long __len) {
        var mh$ = inet_net_ntop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__af, __cp, __bits, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_net_pton$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"inet_net_pton");
    }
    /**
     * {@snippet :
     * int inet_net_pton(int __af, char* __cp, void* __buf, size_t __len);
     * }
     */
    public static int inet_net_pton(int __af, MemorySegment __cp, MemorySegment __buf, long __len) {
        var mh$ = inet_net_pton$MH();
        try {
            return (int)mh$.invokeExact(__af, __cp, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_nsap_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"inet_nsap_addr");
    }
    /**
     * {@snippet :
     * unsigned int inet_nsap_addr(char* __cp, unsigned char* __buf, int __len);
     * }
     */
    public static int inet_nsap_addr(MemorySegment __cp, MemorySegment __buf, int __len) {
        var mh$ = inet_nsap_addr$MH();
        try {
            return (int)mh$.invokeExact(__cp, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_nsap_ntoa$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"inet_nsap_ntoa");
    }
    /**
     * {@snippet :
     * char* inet_nsap_ntoa(int __len, unsigned char* __cp, char* __buf);
     * }
     */
    public static MemorySegment inet_nsap_ntoa(int __len, MemorySegment __cp, MemorySegment __buf) {
        var mh$ = inet_nsap_ntoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__len, __cp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int useconds_t;
     * }
     */
    public static final OfInt useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"access");
    }
    /**
     * {@snippet :
     * int access(char* __name, int __type);
     * }
     */
    public static int access(MemorySegment __name, int __type) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"faccessat");
    }
    /**
     * {@snippet :
     * int faccessat(int __fd, char* __file, int __type, int __flag);
     * }
     */
    public static int faccessat(int __fd, MemorySegment __file, int __type, int __flag) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __type, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"lseek");
    }
    /**
     * {@snippet :
     * __off_t lseek(int __fd, __off_t __offset, int __whence);
     * }
     */
    public static long lseek(int __fd, long __offset, int __whence) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"close");
    }
    /**
     * {@snippet :
     * int close(int __fd);
     * }
     */
    public static int close(int __fd) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closefrom$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"closefrom");
    }
    /**
     * {@snippet :
     * void closefrom(int __lowfd);
     * }
     */
    public static void closefrom(int __lowfd) {
        var mh$ = closefrom$MH();
        try {
            mh$.invokeExact(__lowfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"read");
    }
    /**
     * {@snippet :
     * ssize_t read(int __fd, void* __buf, size_t __nbytes);
     * }
     */
    public static long read(int __fd, MemorySegment __buf, long __nbytes) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"write");
    }
    /**
     * {@snippet :
     * ssize_t write(int __fd, void* __buf, size_t __n);
     * }
     */
    public static long write(int __fd, MemorySegment __buf, long __n) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"pread");
    }
    /**
     * {@snippet :
     * ssize_t pread(int __fd, void* __buf, size_t __nbytes, __off_t __offset);
     * }
     */
    public static long pread(int __fd, MemorySegment __buf, long __nbytes, long __offset) {
        var mh$ = pread$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"pwrite");
    }
    /**
     * {@snippet :
     * ssize_t pwrite(int __fd, void* __buf, size_t __n, __off_t __offset);
     * }
     */
    public static long pwrite(int __fd, MemorySegment __buf, long __n, long __offset) {
        var mh$ = pwrite$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"pipe");
    }
    /**
     * {@snippet :
     * int pipe(int __pipedes[2]);
     * }
     */
    public static int pipe(MemorySegment __pipedes) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(__pipedes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"alarm");
    }
    /**
     * {@snippet :
     * unsigned int alarm(unsigned int __seconds);
     * }
     */
    public static int alarm(int __seconds) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"sleep");
    }
    /**
     * {@snippet :
     * unsigned int sleep(unsigned int __seconds);
     * }
     */
    public static int sleep(int __seconds) {
        var mh$ = sleep$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"ualarm");
    }
    /**
     * {@snippet :
     * __useconds_t ualarm(__useconds_t __value, __useconds_t __interval);
     * }
     */
    public static int ualarm(int __value, int __interval) {
        var mh$ = ualarm$MH();
        try {
            return (int)mh$.invokeExact(__value, __interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"usleep");
    }
    /**
     * {@snippet :
     * int usleep(__useconds_t __useconds);
     * }
     */
    public static int usleep(int __useconds) {
        var mh$ = usleep$MH();
        try {
            return (int)mh$.invokeExact(__useconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"pause");
    }
    /**
     * {@snippet :
     * int pause();
     * }
     */
    public static int pause() {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"chown");
    }
    /**
     * {@snippet :
     * int chown(char* __file, __uid_t __owner, __gid_t __group);
     * }
     */
    public static int chown(MemorySegment __file, int __owner, int __group) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"fchown");
    }
    /**
     * {@snippet :
     * int fchown(int __fd, __uid_t __owner, __gid_t __group);
     * }
     */
    public static int fchown(int __fd, int __owner, int __group) {
        var mh$ = fchown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"lchown");
    }
    /**
     * {@snippet :
     * int lchown(char* __file, __uid_t __owner, __gid_t __group);
     * }
     */
    public static int lchown(MemorySegment __file, int __owner, int __group) {
        var mh$ = lchown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"fchownat");
    }
    /**
     * {@snippet :
     * int fchownat(int __fd, char* __file, __uid_t __owner, __gid_t __group, int __flag);
     * }
     */
    public static int fchownat(int __fd, MemorySegment __file, int __owner, int __group, int __flag) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __owner, __group, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"chdir");
    }
    /**
     * {@snippet :
     * int chdir(char* __path);
     * }
     */
    public static int chdir(MemorySegment __path) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"fchdir");
    }
    /**
     * {@snippet :
     * int fchdir(int __fd);
     * }
     */
    public static int fchdir(int __fd) {
        var mh$ = fchdir$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"getcwd");
    }
    /**
     * {@snippet :
     * char* getcwd(char* __buf, size_t __size);
     * }
     */
    public static MemorySegment getcwd(MemorySegment __buf, long __size) {
        var mh$ = getcwd$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"getwd");
    }
    /**
     * {@snippet :
     * char* getwd(char* __buf);
     * }
     */
    public static MemorySegment getwd(MemorySegment __buf) {
        var mh$ = getwd$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"dup");
    }
    /**
     * {@snippet :
     * int dup(int __fd);
     * }
     */
    public static int dup(int __fd) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"dup2");
    }
    /**
     * {@snippet :
     * int dup2(int __fd, int __fd2);
     * }
     */
    public static int dup2(int __fd, int __fd2) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fd2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __environ$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __environ$VH() {
        return constants$63.const$0;
    }
    public static MemorySegment __environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"__environ");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char** __environ;
     * }
     */
    public static MemorySegment __environ$get() {
        return (java.lang.foreign.MemorySegment) constants$63.const$0.get(RuntimeHelper.requireNonNull(constants$63.const$1, "__environ"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char** __environ;
     * }
     */
    public static void __environ$set(MemorySegment x) {
        constants$63.const$0.set(RuntimeHelper.requireNonNull(constants$63.const$1, "__environ"), x);
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"execve");
    }
    /**
     * {@snippet :
     * int execve(char* __path, char* __argv[], char* __envp[]);
     * }
     */
    public static int execve(MemorySegment __path, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fexecve$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"fexecve");
    }
    /**
     * {@snippet :
     * int fexecve(int __fd, char* __argv[], char* __envp[]);
     * }
     */
    public static int fexecve(int __fd, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = fexecve$MH();
        try {
            return (int)mh$.invokeExact(__fd, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"execv");
    }
    /**
     * {@snippet :
     * int execv(char* __path, char* __argv[]);
     * }
     */
    public static int execv(MemorySegment __path, MemorySegment __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"execle");
    }
    /**
     * {@snippet :
     * int execle(char* __path, char* __arg,...);
     * }
     */
    public static int execle(MemorySegment __path, MemorySegment __arg, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"execl");
    }
    /**
     * {@snippet :
     * int execl(char* __path, char* __arg,...);
     * }
     */
    public static int execl(MemorySegment __path, MemorySegment __arg, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"execvp");
    }
    /**
     * {@snippet :
     * int execvp(char* __file, char* __argv[]);
     * }
     */
    public static int execvp(MemorySegment __file, MemorySegment __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"execlp");
    }
    /**
     * {@snippet :
     * int execlp(char* __file, char* __arg,...);
     * }
     */
    public static int execlp(MemorySegment __file, MemorySegment __arg, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"nice");
    }
    /**
     * {@snippet :
     * int nice(int __inc);
     * }
     */
    public static int nice(int __inc) {
        var mh$ = nice$MH();
        try {
            return (int)mh$.invokeExact(__inc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"_exit");
    }
    /**
     * {@snippet :
     * void _exit(int __status);
     * }
     */
    public static void _exit(int __status) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ._PC_LINK_MAX = 0;
     * }
     */
    public static int _PC_LINK_MAX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._PC_MAX_CANON = 1;
     * }
     */
    public static int _PC_MAX_CANON() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._PC_MAX_INPUT = 2;
     * }
     */
    public static int _PC_MAX_INPUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._PC_NAME_MAX = 3;
     * }
     */
    public static int _PC_NAME_MAX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ._PC_PATH_MAX = 4;
     * }
     */
    public static int _PC_PATH_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._PC_PIPE_BUF = 5;
     * }
     */
    public static int _PC_PIPE_BUF() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._PC_CHOWN_RESTRICTED = 6;
     * }
     */
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ._PC_NO_TRUNC = 7;
     * }
     */
    public static int _PC_NO_TRUNC() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ._PC_VDISABLE = 8;
     * }
     */
    public static int _PC_VDISABLE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ._PC_SYNC_IO = 9;
     * }
     */
    public static int _PC_SYNC_IO() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ._PC_ASYNC_IO = 10;
     * }
     */
    public static int _PC_ASYNC_IO() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ._PC_PRIO_IO = 11;
     * }
     */
    public static int _PC_PRIO_IO() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ._PC_SOCK_MAXBUF = 12;
     * }
     */
    public static int _PC_SOCK_MAXBUF() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ._PC_FILESIZEBITS = 13;
     * }
     */
    public static int _PC_FILESIZEBITS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_INCR_XFER_SIZE = 14;
     * }
     */
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_MAX_XFER_SIZE = 15;
     * }
     */
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_MIN_XFER_SIZE = 16;
     * }
     */
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ._PC_REC_XFER_ALIGN = 17;
     * }
     */
    public static int _PC_REC_XFER_ALIGN() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ._PC_ALLOC_SIZE_MIN = 18;
     * }
     */
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ._PC_SYMLINK_MAX = 19;
     * }
     */
    public static int _PC_SYMLINK_MAX() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ._PC_2_SYMLINKS = 20;
     * }
     */
    public static int _PC_2_SYMLINKS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ._SC_ARG_MAX = 0;
     * }
     */
    public static int _SC_ARG_MAX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHILD_MAX = 1;
     * }
     */
    public static int _SC_CHILD_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._SC_CLK_TCK = 2;
     * }
     */
    public static int _SC_CLK_TCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._SC_NGROUPS_MAX = 3;
     * }
     */
    public static int _SC_NGROUPS_MAX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ._SC_OPEN_MAX = 4;
     * }
     */
    public static int _SC_OPEN_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._SC_STREAM_MAX = 5;
     * }
     */
    public static int _SC_STREAM_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._SC_TZNAME_MAX = 6;
     * }
     */
    public static int _SC_TZNAME_MAX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ._SC_JOB_CONTROL = 7;
     * }
     */
    public static int _SC_JOB_CONTROL() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ._SC_SAVED_IDS = 8;
     * }
     */
    public static int _SC_SAVED_IDS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ._SC_REALTIME_SIGNALS = 9;
     * }
     */
    public static int _SC_REALTIME_SIGNALS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ._SC_PRIORITY_SCHEDULING = 10;
     * }
     */
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ._SC_TIMERS = 11;
     * }
     */
    public static int _SC_TIMERS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ._SC_ASYNCHRONOUS_IO = 12;
     * }
     */
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ._SC_PRIORITIZED_IO = 13;
     * }
     */
    public static int _SC_PRIORITIZED_IO() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYNCHRONIZED_IO = 14;
     * }
     */
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ._SC_FSYNC = 15;
     * }
     */
    public static int _SC_FSYNC() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ._SC_MAPPED_FILES = 16;
     * }
     */
    public static int _SC_MAPPED_FILES() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ._SC_MEMLOCK = 17;
     * }
     */
    public static int _SC_MEMLOCK() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ._SC_MEMLOCK_RANGE = 18;
     * }
     */
    public static int _SC_MEMLOCK_RANGE() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ._SC_MEMORY_PROTECTION = 19;
     * }
     */
    public static int _SC_MEMORY_PROTECTION() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ._SC_MESSAGE_PASSING = 20;
     * }
     */
    public static int _SC_MESSAGE_PASSING() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ._SC_SEMAPHORES = 21;
     * }
     */
    public static int _SC_SEMAPHORES() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHARED_MEMORY_OBJECTS = 22;
     * }
     */
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum ._SC_AIO_LISTIO_MAX = 23;
     * }
     */
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum ._SC_AIO_MAX = 24;
     * }
     */
    public static int _SC_AIO_MAX() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum ._SC_AIO_PRIO_DELTA_MAX = 25;
     * }
     */
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum ._SC_DELAYTIMER_MAX = 26;
     * }
     */
    public static int _SC_DELAYTIMER_MAX() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum ._SC_MQ_OPEN_MAX = 27;
     * }
     */
    public static int _SC_MQ_OPEN_MAX() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum ._SC_MQ_PRIO_MAX = 28;
     * }
     */
    public static int _SC_MQ_PRIO_MAX() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum ._SC_VERSION = 29;
     * }
     */
    public static int _SC_VERSION() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum ._SC_PAGESIZE = 30;
     * }
     */
    public static int _SC_PAGESIZE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum ._SC_RTSIG_MAX = 31;
     * }
     */
    public static int _SC_RTSIG_MAX() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum ._SC_SEM_NSEMS_MAX = 32;
     * }
     */
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum ._SC_SEM_VALUE_MAX = 33;
     * }
     */
    public static int _SC_SEM_VALUE_MAX() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum ._SC_SIGQUEUE_MAX = 34;
     * }
     */
    public static int _SC_SIGQUEUE_MAX() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum ._SC_TIMER_MAX = 35;
     * }
     */
    public static int _SC_TIMER_MAX() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_BASE_MAX = 36;
     * }
     */
    public static int _SC_BC_BASE_MAX() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_DIM_MAX = 37;
     * }
     */
    public static int _SC_BC_DIM_MAX() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_SCALE_MAX = 38;
     * }
     */
    public static int _SC_BC_SCALE_MAX() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum ._SC_BC_STRING_MAX = 39;
     * }
     */
    public static int _SC_BC_STRING_MAX() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum ._SC_COLL_WEIGHTS_MAX = 40;
     * }
     */
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum ._SC_EQUIV_CLASS_MAX = 41;
     * }
     */
    public static int _SC_EQUIV_CLASS_MAX() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum ._SC_EXPR_NEST_MAX = 42;
     * }
     */
    public static int _SC_EXPR_NEST_MAX() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum ._SC_LINE_MAX = 43;
     * }
     */
    public static int _SC_LINE_MAX() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum ._SC_RE_DUP_MAX = 44;
     * }
     */
    public static int _SC_RE_DUP_MAX() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHARCLASS_NAME_MAX = 45;
     * }
     */
    public static int _SC_CHARCLASS_NAME_MAX() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_VERSION = 46;
     * }
     */
    public static int _SC_2_VERSION() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_C_BIND = 47;
     * }
     */
    public static int _SC_2_C_BIND() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_C_DEV = 48;
     * }
     */
    public static int _SC_2_C_DEV() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_FORT_DEV = 49;
     * }
     */
    public static int _SC_2_FORT_DEV() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_FORT_RUN = 50;
     * }
     */
    public static int _SC_2_FORT_RUN() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_SW_DEV = 51;
     * }
     */
    public static int _SC_2_SW_DEV() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_LOCALEDEF = 52;
     * }
     */
    public static int _SC_2_LOCALEDEF() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII = 53;
     * }
     */
    public static int _SC_PII() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_XTI = 54;
     * }
     */
    public static int _SC_PII_XTI() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_SOCKET = 55;
     * }
     */
    public static int _SC_PII_SOCKET() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_INTERNET = 56;
     * }
     */
    public static int _SC_PII_INTERNET() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI = 57;
     * }
     */
    public static int _SC_PII_OSI() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum ._SC_POLL = 58;
     * }
     */
    public static int _SC_POLL() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum ._SC_SELECT = 59;
     * }
     */
    public static int _SC_SELECT() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum ._SC_UIO_MAXIOV = 60;
     * }
     */
    public static int _SC_UIO_MAXIOV() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum ._SC_IOV_MAX = 60;
     * }
     */
    public static int _SC_IOV_MAX() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_INTERNET_STREAM = 61;
     * }
     */
    public static int _SC_PII_INTERNET_STREAM() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_INTERNET_DGRAM = 62;
     * }
     */
    public static int _SC_PII_INTERNET_DGRAM() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI_COTS = 63;
     * }
     */
    public static int _SC_PII_OSI_COTS() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI_CLTS = 64;
     * }
     */
    public static int _SC_PII_OSI_CLTS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum ._SC_PII_OSI_M = 65;
     * }
     */
    public static int _SC_PII_OSI_M() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum ._SC_T_IOV_MAX = 66;
     * }
     */
    public static int _SC_T_IOV_MAX() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREADS = 67;
     * }
     */
    public static int _SC_THREADS() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_SAFE_FUNCTIONS = 68;
     * }
     */
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum ._SC_GETGR_R_SIZE_MAX = 69;
     * }
     */
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)69L;
    }
}


