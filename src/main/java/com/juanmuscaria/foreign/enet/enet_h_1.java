// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class enet_h_1 {

    /**
     * {@snippet :
     * enum ._SC_GETPW_R_SIZE_MAX = 70;
     * }
     */
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum ._SC_LOGIN_NAME_MAX = 71;
     * }
     */
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum ._SC_TTY_NAME_MAX = 72;
     * }
     */
    public static int _SC_TTY_NAME_MAX() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_DESTRUCTOR_ITERATIONS = 73;
     * }
     */
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_KEYS_MAX = 74;
     * }
     */
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_STACK_MIN = 75;
     * }
     */
    public static int _SC_THREAD_STACK_MIN() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_THREADS_MAX = 76;
     * }
     */
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ATTR_STACKADDR = 77;
     * }
     */
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ATTR_STACKSIZE = 78;
     * }
     */
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PRIORITY_SCHEDULING = 79;
     * }
     */
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PRIO_INHERIT = 80;
     * }
     */
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PRIO_PROTECT = 81;
     * }
     */
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_PROCESS_SHARED = 82;
     * }
     */
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum ._SC_NPROCESSORS_CONF = 83;
     * }
     */
    public static int _SC_NPROCESSORS_CONF() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum ._SC_NPROCESSORS_ONLN = 84;
     * }
     */
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum ._SC_PHYS_PAGES = 85;
     * }
     */
    public static int _SC_PHYS_PAGES() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum ._SC_AVPHYS_PAGES = 86;
     * }
     */
    public static int _SC_AVPHYS_PAGES() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum ._SC_ATEXIT_MAX = 87;
     * }
     */
    public static int _SC_ATEXIT_MAX() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum ._SC_PASS_MAX = 88;
     * }
     */
    public static int _SC_PASS_MAX() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_VERSION = 89;
     * }
     */
    public static int _SC_XOPEN_VERSION() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XCU_VERSION = 90;
     * }
     */
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_UNIX = 91;
     * }
     */
    public static int _SC_XOPEN_UNIX() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_CRYPT = 92;
     * }
     */
    public static int _SC_XOPEN_CRYPT() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_ENH_I18N = 93;
     * }
     */
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_SHM = 94;
     * }
     */
    public static int _SC_XOPEN_SHM() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_CHAR_TERM = 95;
     * }
     */
    public static int _SC_2_CHAR_TERM() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_C_VERSION = 96;
     * }
     */
    public static int _SC_2_C_VERSION() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_UPE = 97;
     * }
     */
    public static int _SC_2_UPE() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XPG2 = 98;
     * }
     */
    public static int _SC_XOPEN_XPG2() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XPG3 = 99;
     * }
     */
    public static int _SC_XOPEN_XPG3() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_XPG4 = 100;
     * }
     */
    public static int _SC_XOPEN_XPG4() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHAR_BIT = 101;
     * }
     */
    public static int _SC_CHAR_BIT() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHAR_MAX = 102;
     * }
     */
    public static int _SC_CHAR_MAX() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum ._SC_CHAR_MIN = 103;
     * }
     */
    public static int _SC_CHAR_MIN() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum ._SC_INT_MAX = 104;
     * }
     */
    public static int _SC_INT_MAX() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum ._SC_INT_MIN = 105;
     * }
     */
    public static int _SC_INT_MIN() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum ._SC_LONG_BIT = 106;
     * }
     */
    public static int _SC_LONG_BIT() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum ._SC_WORD_BIT = 107;
     * }
     */
    public static int _SC_WORD_BIT() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum ._SC_MB_LEN_MAX = 108;
     * }
     */
    public static int _SC_MB_LEN_MAX() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum ._SC_NZERO = 109;
     * }
     */
    public static int _SC_NZERO() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum ._SC_SSIZE_MAX = 110;
     * }
     */
    public static int _SC_SSIZE_MAX() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * enum ._SC_SCHAR_MAX = 111;
     * }
     */
    public static int _SC_SCHAR_MAX() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * enum ._SC_SCHAR_MIN = 112;
     * }
     */
    public static int _SC_SCHAR_MIN() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHRT_MAX = 113;
     * }
     */
    public static int _SC_SHRT_MAX() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHRT_MIN = 114;
     * }
     */
    public static int _SC_SHRT_MIN() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum ._SC_UCHAR_MAX = 115;
     * }
     */
    public static int _SC_UCHAR_MAX() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum ._SC_UINT_MAX = 116;
     * }
     */
    public static int _SC_UINT_MAX() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * enum ._SC_ULONG_MAX = 117;
     * }
     */
    public static int _SC_ULONG_MAX() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * enum ._SC_USHRT_MAX = 118;
     * }
     */
    public static int _SC_USHRT_MAX() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_ARGMAX = 119;
     * }
     */
    public static int _SC_NL_ARGMAX() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_LANGMAX = 120;
     * }
     */
    public static int _SC_NL_LANGMAX() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_MSGMAX = 121;
     * }
     */
    public static int _SC_NL_MSGMAX() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_NMAX = 122;
     * }
     */
    public static int _SC_NL_NMAX() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_SETMAX = 123;
     * }
     */
    public static int _SC_NL_SETMAX() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * enum ._SC_NL_TEXTMAX = 124;
     * }
     */
    public static int _SC_NL_TEXTMAX() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_ILP32_OFF32 = 125;
     * }
     */
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_ILP32_OFFBIG = 126;
     * }
     */
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_LP64_OFF64 = 127;
     * }
     */
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * enum ._SC_XBS5_LPBIG_OFFBIG = 128;
     * }
     */
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_LEGACY = 129;
     * }
     */
    public static int _SC_XOPEN_LEGACY() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_REALTIME = 130;
     * }
     */
    public static int _SC_XOPEN_REALTIME() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_REALTIME_THREADS = 131;
     * }
     */
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * enum ._SC_ADVISORY_INFO = 132;
     * }
     */
    public static int _SC_ADVISORY_INFO() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * enum ._SC_BARRIERS = 133;
     * }
     */
    public static int _SC_BARRIERS() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * enum ._SC_BASE = 134;
     * }
     */
    public static int _SC_BASE() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * enum ._SC_C_LANG_SUPPORT = 135;
     * }
     */
    public static int _SC_C_LANG_SUPPORT() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * enum ._SC_C_LANG_SUPPORT_R = 136;
     * }
     */
    public static int _SC_C_LANG_SUPPORT_R() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum ._SC_CLOCK_SELECTION = 137;
     * }
     */
    public static int _SC_CLOCK_SELECTION() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * enum ._SC_CPUTIME = 138;
     * }
     */
    public static int _SC_CPUTIME() {
        return (int)138L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_CPUTIME = 139;
     * }
     */
    public static int _SC_THREAD_CPUTIME() {
        return (int)139L;
    }
    /**
     * {@snippet :
     * enum ._SC_DEVICE_IO = 140;
     * }
     */
    public static int _SC_DEVICE_IO() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * enum ._SC_DEVICE_SPECIFIC = 141;
     * }
     */
    public static int _SC_DEVICE_SPECIFIC() {
        return (int)141L;
    }
    /**
     * {@snippet :
     * enum ._SC_DEVICE_SPECIFIC_R = 142;
     * }
     */
    public static int _SC_DEVICE_SPECIFIC_R() {
        return (int)142L;
    }
    /**
     * {@snippet :
     * enum ._SC_FD_MGMT = 143;
     * }
     */
    public static int _SC_FD_MGMT() {
        return (int)143L;
    }
    /**
     * {@snippet :
     * enum ._SC_FIFO = 144;
     * }
     */
    public static int _SC_FIFO() {
        return (int)144L;
    }
    /**
     * {@snippet :
     * enum ._SC_PIPE = 145;
     * }
     */
    public static int _SC_PIPE() {
        return (int)145L;
    }
    /**
     * {@snippet :
     * enum ._SC_FILE_ATTRIBUTES = 146;
     * }
     */
    public static int _SC_FILE_ATTRIBUTES() {
        return (int)146L;
    }
    /**
     * {@snippet :
     * enum ._SC_FILE_LOCKING = 147;
     * }
     */
    public static int _SC_FILE_LOCKING() {
        return (int)147L;
    }
    /**
     * {@snippet :
     * enum ._SC_FILE_SYSTEM = 148;
     * }
     */
    public static int _SC_FILE_SYSTEM() {
        return (int)148L;
    }
    /**
     * {@snippet :
     * enum ._SC_MONOTONIC_CLOCK = 149;
     * }
     */
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)149L;
    }
    /**
     * {@snippet :
     * enum ._SC_MULTI_PROCESS = 150;
     * }
     */
    public static int _SC_MULTI_PROCESS() {
        return (int)150L;
    }
    /**
     * {@snippet :
     * enum ._SC_SINGLE_PROCESS = 151;
     * }
     */
    public static int _SC_SINGLE_PROCESS() {
        return (int)151L;
    }
    /**
     * {@snippet :
     * enum ._SC_NETWORKING = 152;
     * }
     */
    public static int _SC_NETWORKING() {
        return (int)152L;
    }
    /**
     * {@snippet :
     * enum ._SC_READER_WRITER_LOCKS = 153;
     * }
     */
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)153L;
    }
    /**
     * {@snippet :
     * enum ._SC_SPIN_LOCKS = 154;
     * }
     */
    public static int _SC_SPIN_LOCKS() {
        return (int)154L;
    }
    /**
     * {@snippet :
     * enum ._SC_REGEXP = 155;
     * }
     */
    public static int _SC_REGEXP() {
        return (int)155L;
    }
    /**
     * {@snippet :
     * enum ._SC_REGEX_VERSION = 156;
     * }
     */
    public static int _SC_REGEX_VERSION() {
        return (int)156L;
    }
    /**
     * {@snippet :
     * enum ._SC_SHELL = 157;
     * }
     */
    public static int _SC_SHELL() {
        return (int)157L;
    }
    /**
     * {@snippet :
     * enum ._SC_SIGNALS = 158;
     * }
     */
    public static int _SC_SIGNALS() {
        return (int)158L;
    }
    /**
     * {@snippet :
     * enum ._SC_SPAWN = 159;
     * }
     */
    public static int _SC_SPAWN() {
        return (int)159L;
    }
    /**
     * {@snippet :
     * enum ._SC_SPORADIC_SERVER = 160;
     * }
     */
    public static int _SC_SPORADIC_SERVER() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_SPORADIC_SERVER = 161;
     * }
     */
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)161L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYSTEM_DATABASE = 162;
     * }
     */
    public static int _SC_SYSTEM_DATABASE() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYSTEM_DATABASE_R = 163;
     * }
     */
    public static int _SC_SYSTEM_DATABASE_R() {
        return (int)163L;
    }
    /**
     * {@snippet :
     * enum ._SC_TIMEOUTS = 164;
     * }
     */
    public static int _SC_TIMEOUTS() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * enum ._SC_TYPED_MEMORY_OBJECTS = 165;
     * }
     */
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)165L;
    }
    /**
     * {@snippet :
     * enum ._SC_USER_GROUPS = 166;
     * }
     */
    public static int _SC_USER_GROUPS() {
        return (int)166L;
    }
    /**
     * {@snippet :
     * enum ._SC_USER_GROUPS_R = 167;
     * }
     */
    public static int _SC_USER_GROUPS_R() {
        return (int)167L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS = 168;
     * }
     */
    public static int _SC_2_PBS() {
        return (int)168L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_ACCOUNTING = 169;
     * }
     */
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)169L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_LOCATE = 170;
     * }
     */
    public static int _SC_2_PBS_LOCATE() {
        return (int)170L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_MESSAGE = 171;
     * }
     */
    public static int _SC_2_PBS_MESSAGE() {
        return (int)171L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_TRACK = 172;
     * }
     */
    public static int _SC_2_PBS_TRACK() {
        return (int)172L;
    }
    /**
     * {@snippet :
     * enum ._SC_SYMLOOP_MAX = 173;
     * }
     */
    public static int _SC_SYMLOOP_MAX() {
        return (int)173L;
    }
    /**
     * {@snippet :
     * enum ._SC_STREAMS = 174;
     * }
     */
    public static int _SC_STREAMS() {
        return (int)174L;
    }
    /**
     * {@snippet :
     * enum ._SC_2_PBS_CHECKPOINT = 175;
     * }
     */
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)175L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_ILP32_OFF32 = 176;
     * }
     */
    public static int _SC_V6_ILP32_OFF32() {
        return (int)176L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_ILP32_OFFBIG = 177;
     * }
     */
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)177L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_LP64_OFF64 = 178;
     * }
     */
    public static int _SC_V6_LP64_OFF64() {
        return (int)178L;
    }
    /**
     * {@snippet :
     * enum ._SC_V6_LPBIG_OFFBIG = 179;
     * }
     */
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)179L;
    }
    /**
     * {@snippet :
     * enum ._SC_HOST_NAME_MAX = 180;
     * }
     */
    public static int _SC_HOST_NAME_MAX() {
        return (int)180L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE = 181;
     * }
     */
    public static int _SC_TRACE() {
        return (int)181L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_EVENT_FILTER = 182;
     * }
     */
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)182L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_INHERIT = 183;
     * }
     */
    public static int _SC_TRACE_INHERIT() {
        return (int)183L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_LOG = 184;
     * }
     */
    public static int _SC_TRACE_LOG() {
        return (int)184L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_ICACHE_SIZE = 185;
     * }
     */
    public static int _SC_LEVEL1_ICACHE_SIZE() {
        return (int)185L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_ICACHE_ASSOC = 186;
     * }
     */
    public static int _SC_LEVEL1_ICACHE_ASSOC() {
        return (int)186L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_ICACHE_LINESIZE = 187;
     * }
     */
    public static int _SC_LEVEL1_ICACHE_LINESIZE() {
        return (int)187L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_DCACHE_SIZE = 188;
     * }
     */
    public static int _SC_LEVEL1_DCACHE_SIZE() {
        return (int)188L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_DCACHE_ASSOC = 189;
     * }
     */
    public static int _SC_LEVEL1_DCACHE_ASSOC() {
        return (int)189L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL1_DCACHE_LINESIZE = 190;
     * }
     */
    public static int _SC_LEVEL1_DCACHE_LINESIZE() {
        return (int)190L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL2_CACHE_SIZE = 191;
     * }
     */
    public static int _SC_LEVEL2_CACHE_SIZE() {
        return (int)191L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL2_CACHE_ASSOC = 192;
     * }
     */
    public static int _SC_LEVEL2_CACHE_ASSOC() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL2_CACHE_LINESIZE = 193;
     * }
     */
    public static int _SC_LEVEL2_CACHE_LINESIZE() {
        return (int)193L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL3_CACHE_SIZE = 194;
     * }
     */
    public static int _SC_LEVEL3_CACHE_SIZE() {
        return (int)194L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL3_CACHE_ASSOC = 195;
     * }
     */
    public static int _SC_LEVEL3_CACHE_ASSOC() {
        return (int)195L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL3_CACHE_LINESIZE = 196;
     * }
     */
    public static int _SC_LEVEL3_CACHE_LINESIZE() {
        return (int)196L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL4_CACHE_SIZE = 197;
     * }
     */
    public static int _SC_LEVEL4_CACHE_SIZE() {
        return (int)197L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL4_CACHE_ASSOC = 198;
     * }
     */
    public static int _SC_LEVEL4_CACHE_ASSOC() {
        return (int)198L;
    }
    /**
     * {@snippet :
     * enum ._SC_LEVEL4_CACHE_LINESIZE = 199;
     * }
     */
    public static int _SC_LEVEL4_CACHE_LINESIZE() {
        return (int)199L;
    }
    /**
     * {@snippet :
     * enum ._SC_IPV6 = 235;
     * }
     */
    public static int _SC_IPV6() {
        return (int)235L;
    }
    /**
     * {@snippet :
     * enum ._SC_RAW_SOCKETS = 236;
     * }
     */
    public static int _SC_RAW_SOCKETS() {
        return (int)236L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_ILP32_OFF32 = 237;
     * }
     */
    public static int _SC_V7_ILP32_OFF32() {
        return (int)237L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_ILP32_OFFBIG = 238;
     * }
     */
    public static int _SC_V7_ILP32_OFFBIG() {
        return (int)238L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_LP64_OFF64 = 239;
     * }
     */
    public static int _SC_V7_LP64_OFF64() {
        return (int)239L;
    }
    /**
     * {@snippet :
     * enum ._SC_V7_LPBIG_OFFBIG = 240;
     * }
     */
    public static int _SC_V7_LPBIG_OFFBIG() {
        return (int)240L;
    }
    /**
     * {@snippet :
     * enum ._SC_SS_REPL_MAX = 241;
     * }
     */
    public static int _SC_SS_REPL_MAX() {
        return (int)241L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_EVENT_NAME_MAX = 242;
     * }
     */
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)242L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_NAME_MAX = 243;
     * }
     */
    public static int _SC_TRACE_NAME_MAX() {
        return (int)243L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_SYS_MAX = 244;
     * }
     */
    public static int _SC_TRACE_SYS_MAX() {
        return (int)244L;
    }
    /**
     * {@snippet :
     * enum ._SC_TRACE_USER_EVENT_MAX = 245;
     * }
     */
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)245L;
    }
    /**
     * {@snippet :
     * enum ._SC_XOPEN_STREAMS = 246;
     * }
     */
    public static int _SC_XOPEN_STREAMS() {
        return (int)246L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ROBUST_PRIO_INHERIT = 247;
     * }
     */
    public static int _SC_THREAD_ROBUST_PRIO_INHERIT() {
        return (int)247L;
    }
    /**
     * {@snippet :
     * enum ._SC_THREAD_ROBUST_PRIO_PROTECT = 248;
     * }
     */
    public static int _SC_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)248L;
    }
    /**
     * {@snippet :
     * enum ._SC_MINSIGSTKSZ = 249;
     * }
     */
    public static int _SC_MINSIGSTKSZ() {
        return (int)249L;
    }
    /**
     * {@snippet :
     * enum ._SC_SIGSTKSZ = 250;
     * }
     */
    public static int _SC_SIGSTKSZ() {
        return (int)250L;
    }
    /**
     * {@snippet :
     * enum ._CS_PATH = 0;
     * }
     */
    public static int _CS_PATH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._CS_V6_WIDTH_RESTRICTED_ENVS = 1;
     * }
     */
    public static int _CS_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._CS_GNU_LIBC_VERSION = 2;
     * }
     */
    public static int _CS_GNU_LIBC_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._CS_GNU_LIBPTHREAD_VERSION = 3;
     * }
     */
    public static int _CS_GNU_LIBPTHREAD_VERSION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ._CS_V5_WIDTH_RESTRICTED_ENVS = 4;
     * }
     */
    public static int _CS_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._CS_V7_WIDTH_RESTRICTED_ENVS = 5;
     * }
     */
    public static int _CS_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_CFLAGS = 1000;
     * }
     */
    public static int _CS_LFS_CFLAGS() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_LDFLAGS = 1001;
     * }
     */
    public static int _CS_LFS_LDFLAGS() {
        return (int)1001L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_LIBS = 1002;
     * }
     */
    public static int _CS_LFS_LIBS() {
        return (int)1002L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS_LINTFLAGS = 1003;
     * }
     */
    public static int _CS_LFS_LINTFLAGS() {
        return (int)1003L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_CFLAGS = 1004;
     * }
     */
    public static int _CS_LFS64_CFLAGS() {
        return (int)1004L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_LDFLAGS = 1005;
     * }
     */
    public static int _CS_LFS64_LDFLAGS() {
        return (int)1005L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_LIBS = 1006;
     * }
     */
    public static int _CS_LFS64_LIBS() {
        return (int)1006L;
    }
    /**
     * {@snippet :
     * enum ._CS_LFS64_LINTFLAGS = 1007;
     * }
     */
    public static int _CS_LFS64_LINTFLAGS() {
        return (int)1007L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_CFLAGS = 1100;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)1100L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)1101L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_LIBS = 1102;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)1102L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)1103L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)1104L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)1105L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_LIBS = 1106;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)1106L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1107L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_CFLAGS = 1108;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)1108L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_LDFLAGS = 1109;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)1109L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_LIBS = 1110;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)1110L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)1111L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)1112L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1113L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)1114L;
    }
    /**
     * {@snippet :
     * enum ._CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1115L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)1116L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)1117L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)1118L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS() {
        return (int)1119L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)1120L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)1121L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)1122L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1123L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)1124L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)1125L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_LIBS = 1126;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)1126L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS() {
        return (int)1127L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)1128L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1129L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)1130L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1131L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_CFLAGS() {
        return (int)1132L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS() {
        return (int)1133L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LIBS() {
        return (int)1134L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS() {
        return (int)1135L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS() {
        return (int)1136L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS() {
        return (int)1137L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LIBS() {
        return (int)1138L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1139L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_CFLAGS() {
        return (int)1140L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LDFLAGS() {
        return (int)1141L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_LIBS = 1142;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LIBS() {
        return (int)1142L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS() {
        return (int)1143L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS() {
        return (int)1144L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1145L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS() {
        return (int)1146L;
    }
    /**
     * {@snippet :
     * enum ._CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1147L;
    }
    /**
     * {@snippet :
     * enum ._CS_V6_ENV = 1148;
     * }
     */
    public static int _CS_V6_ENV() {
        return (int)1148L;
    }
    /**
     * {@snippet :
     * enum ._CS_V7_ENV = 1149;
     * }
     */
    public static int _CS_V7_ENV() {
        return (int)1149L;
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$6,"pathconf");
    }
    /**
     * {@snippet :
     * long pathconf(char* __path, int __name);
     * }
     */
    public static long pathconf(MemorySegment __path, int __name) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(__path, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"fpathconf");
    }
    /**
     * {@snippet :
     * long fpathconf(int __fd, int __name);
     * }
     */
    public static long fpathconf(int __fd, int __name) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(__fd, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"sysconf");
    }
    /**
     * {@snippet :
     * long sysconf(int __name);
     * }
     */
    public static long sysconf(int __name) {
        var mh$ = sysconf$MH();
        try {
            return (long)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"confstr");
    }
    /**
     * {@snippet :
     * size_t confstr(int __name, char* __buf, size_t __len);
     * }
     */
    public static long confstr(int __name, MemorySegment __buf, long __len) {
        var mh$ = confstr$MH();
        try {
            return (long)mh$.invokeExact(__name, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"getpid");
    }
    /**
     * {@snippet :
     * __pid_t getpid();
     * }
     */
    public static int getpid() {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$0,"getppid");
    }
    /**
     * {@snippet :
     * __pid_t getppid();
     * }
     */
    public static int getppid() {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"getpgrp");
    }
    /**
     * {@snippet :
     * __pid_t getpgrp();
     * }
     */
    public static int getpgrp() {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"__getpgid");
    }
    /**
     * {@snippet :
     * __pid_t __getpgid(__pid_t __pid);
     * }
     */
    public static int __getpgid(int __pid) {
        var mh$ = __getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$3,"getpgid");
    }
    /**
     * {@snippet :
     * __pid_t getpgid(__pid_t __pid);
     * }
     */
    public static int getpgid(int __pid) {
        var mh$ = getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"setpgid");
    }
    /**
     * {@snippet :
     * int setpgid(__pid_t __pid, __pid_t __pgid);
     * }
     */
    public static int setpgid(int __pid, int __pgid) {
        var mh$ = setpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __pgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"setpgrp");
    }
    /**
     * {@snippet :
     * int setpgrp();
     * }
     */
    public static int setpgrp() {
        var mh$ = setpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"setsid");
    }
    /**
     * {@snippet :
     * __pid_t setsid();
     * }
     */
    public static int setsid() {
        var mh$ = setsid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"getsid");
    }
    /**
     * {@snippet :
     * __pid_t getsid(__pid_t __pid);
     * }
     */
    public static int getsid(int __pid) {
        var mh$ = getsid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"getuid");
    }
    /**
     * {@snippet :
     * __uid_t getuid();
     * }
     */
    public static int getuid() {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"geteuid");
    }
    /**
     * {@snippet :
     * __uid_t geteuid();
     * }
     */
    public static int geteuid() {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"getgid");
    }
    /**
     * {@snippet :
     * __gid_t getgid();
     * }
     */
    public static int getgid() {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"getegid");
    }
    /**
     * {@snippet :
     * __gid_t getegid();
     * }
     */
    public static int getegid() {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$0,"getgroups");
    }
    /**
     * {@snippet :
     * int getgroups(int __size, __gid_t __list[]);
     * }
     */
    public static int getgroups(int __size, MemorySegment __list) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(__size, __list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"setuid");
    }
    /**
     * {@snippet :
     * int setuid(__uid_t __uid);
     * }
     */
    public static int setuid(int __uid) {
        var mh$ = setuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"setreuid");
    }
    /**
     * {@snippet :
     * int setreuid(__uid_t __ruid, __uid_t __euid);
     * }
     */
    public static int setreuid(int __ruid, int __euid) {
        var mh$ = setreuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$3,"seteuid");
    }
    /**
     * {@snippet :
     * int seteuid(__uid_t __uid);
     * }
     */
    public static int seteuid(int __uid) {
        var mh$ = seteuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"setgid");
    }
    /**
     * {@snippet :
     * int setgid(__gid_t __gid);
     * }
     */
    public static int setgid(int __gid) {
        var mh$ = setgid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"setregid");
    }
    /**
     * {@snippet :
     * int setregid(__gid_t __rgid, __gid_t __egid);
     * }
     */
    public static int setregid(int __rgid, int __egid) {
        var mh$ = setregid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"setegid");
    }
    /**
     * {@snippet :
     * int setegid(__gid_t __gid);
     * }
     */
    public static int setegid(int __gid) {
        var mh$ = setegid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"fork");
    }
    /**
     * {@snippet :
     * __pid_t fork();
     * }
     */
    public static int fork() {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"vfork");
    }
    /**
     * {@snippet :
     * int vfork();
     * }
     */
    public static int vfork() {
        var mh$ = vfork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"ttyname");
    }
    /**
     * {@snippet :
     * char* ttyname(int __fd);
     * }
     */
    public static MemorySegment ttyname(int __fd) {
        var mh$ = ttyname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$6,"ttyname_r");
    }
    /**
     * {@snippet :
     * int ttyname_r(int __fd, char* __buf, size_t __buflen);
     * }
     */
    public static int ttyname_r(int __fd, MemorySegment __buf, long __buflen) {
        var mh$ = ttyname_r$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"isatty");
    }
    /**
     * {@snippet :
     * int isatty(int __fd);
     * }
     */
    public static int isatty(int __fd) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"ttyslot");
    }
    /**
     * {@snippet :
     * int ttyslot();
     * }
     */
    public static int ttyslot() {
        var mh$ = ttyslot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"link");
    }
    /**
     * {@snippet :
     * int link(char* __from, char* __to);
     * }
     */
    public static int link(MemorySegment __from, MemorySegment __to) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$4,"linkat");
    }
    /**
     * {@snippet :
     * int linkat(int __fromfd, char* __from, int __tofd, char* __to, int __flags);
     * }
     */
    public static int linkat(int __fromfd, MemorySegment __from, int __tofd, MemorySegment __to, int __flags) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(__fromfd, __from, __tofd, __to, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"symlink");
    }
    /**
     * {@snippet :
     * int symlink(char* __from, char* __to);
     * }
     */
    public static int symlink(MemorySegment __from, MemorySegment __to) {
        var mh$ = symlink$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"readlink");
    }
    /**
     * {@snippet :
     * ssize_t readlink(char* __path, char* __buf, size_t __len);
     * }
     */
    public static long readlink(MemorySegment __path, MemorySegment __buf, long __len) {
        var mh$ = readlink$MH();
        try {
            return (long)mh$.invokeExact(__path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$2,"symlinkat");
    }
    /**
     * {@snippet :
     * int symlinkat(char* __from, int __tofd, char* __to);
     * }
     */
    public static int symlinkat(MemorySegment __from, int __tofd, MemorySegment __to) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(__from, __tofd, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"readlinkat");
    }
    /**
     * {@snippet :
     * ssize_t readlinkat(int __fd, char* __path, char* __buf, size_t __len);
     * }
     */
    public static long readlinkat(int __fd, MemorySegment __path, MemorySegment __buf, long __len) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(__fd, __path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$5,"unlink");
    }
    /**
     * {@snippet :
     * int unlink(char* __name);
     * }
     */
    public static int unlink(MemorySegment __name) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$0,"unlinkat");
    }
    /**
     * {@snippet :
     * int unlinkat(int __fd, char* __name, int __flag);
     * }
     */
    public static int unlinkat(int __fd, MemorySegment __name, int __flag) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __name, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"rmdir");
    }
    /**
     * {@snippet :
     * int rmdir(char* __path);
     * }
     */
    public static int rmdir(MemorySegment __path) {
        var mh$ = rmdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"tcgetpgrp");
    }
    /**
     * {@snippet :
     * __pid_t tcgetpgrp(int __fd);
     * }
     */
    public static int tcgetpgrp(int __fd) {
        var mh$ = tcgetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"tcsetpgrp");
    }
    /**
     * {@snippet :
     * int tcsetpgrp(int __fd, __pid_t __pgrp_id);
     * }
     */
    public static int tcsetpgrp(int __fd, int __pgrp_id) {
        var mh$ = tcsetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd, __pgrp_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"getlogin");
    }
    /**
     * {@snippet :
     * char* getlogin();
     * }
     */
    public static MemorySegment getlogin() {
        var mh$ = getlogin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$0,"getlogin_r");
    }
    /**
     * {@snippet :
     * int getlogin_r(char* __name, size_t __name_len);
     * }
     */
    public static int getlogin_r(MemorySegment __name, long __name_len) {
        var mh$ = getlogin_r$MH();
        try {
            return (int)mh$.invokeExact(__name, __name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"setlogin");
    }
    /**
     * {@snippet :
     * int setlogin(char* __name);
     * }
     */
    public static int setlogin(MemorySegment __name) {
        var mh$ = setlogin$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle optarg$VH() {
        return constants$63.const$0;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"optarg");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char* optarg;
     * }
     */
    public static MemorySegment optarg$get() {
        return (java.lang.foreign.MemorySegment) constants$63.const$0.get(RuntimeHelper.requireNonNull(constants$73.const$2, "optarg"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char* optarg;
     * }
     */
    public static void optarg$set(MemorySegment x) {
        constants$63.const$0.set(RuntimeHelper.requireNonNull(constants$73.const$2, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle optind$VH() {
        return constants$73.const$3;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"optind");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optind;
     * }
     */
    public static int optind$get() {
        return (int) constants$73.const$3.get(RuntimeHelper.requireNonNull(constants$73.const$4, "optind"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optind;
     * }
     */
    public static void optind$set(int x) {
        constants$73.const$3.set(RuntimeHelper.requireNonNull(constants$73.const$4, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle opterr$VH() {
        return constants$73.const$3;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"opterr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int opterr;
     * }
     */
    public static int opterr$get() {
        return (int) constants$73.const$3.get(RuntimeHelper.requireNonNull(constants$73.const$5, "opterr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int opterr;
     * }
     */
    public static void opterr$set(int x) {
        constants$73.const$3.set(RuntimeHelper.requireNonNull(constants$73.const$5, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle optopt$VH() {
        return constants$73.const$3;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"optopt");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optopt;
     * }
     */
    public static int optopt$get() {
        return (int) constants$73.const$3.get(RuntimeHelper.requireNonNull(constants$74.const$0, "optopt"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optopt;
     * }
     */
    public static void optopt$set(int x) {
        constants$73.const$3.set(RuntimeHelper.requireNonNull(constants$74.const$0, "optopt"), x);
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$1,"getopt");
    }
    /**
     * {@snippet :
     * int getopt(int ___argc, char** ___argv, char* __shortopts);
     * }
     */
    public static int getopt(int ___argc, MemorySegment ___argv, MemorySegment __shortopts) {
        var mh$ = getopt$MH();
        try {
            return (int)mh$.invokeExact(___argc, ___argv, __shortopts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"gethostname");
    }
    /**
     * {@snippet :
     * int gethostname(char* __name, size_t __len);
     * }
     */
    public static int gethostname(MemorySegment __name, long __len) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$3,"sethostname");
    }
    /**
     * {@snippet :
     * int sethostname(char* __name, size_t __len);
     * }
     */
    public static int sethostname(MemorySegment __name, long __len) {
        var mh$ = sethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"sethostid");
    }
    /**
     * {@snippet :
     * int sethostid(long __id);
     * }
     */
    public static int sethostid(long __id) {
        var mh$ = sethostid$MH();
        try {
            return (int)mh$.invokeExact(__id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"getdomainname");
    }
    /**
     * {@snippet :
     * int getdomainname(char* __name, size_t __len);
     * }
     */
    public static int getdomainname(MemorySegment __name, long __len) {
        var mh$ = getdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"setdomainname");
    }
    /**
     * {@snippet :
     * int setdomainname(char* __name, size_t __len);
     * }
     */
    public static int setdomainname(MemorySegment __name, long __len) {
        var mh$ = setdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vhangup$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"vhangup");
    }
    /**
     * {@snippet :
     * int vhangup();
     * }
     */
    public static int vhangup() {
        var mh$ = vhangup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"revoke");
    }
    /**
     * {@snippet :
     * int revoke(char* __file);
     * }
     */
    public static int revoke(MemorySegment __file) {
        var mh$ = revoke$MH();
        try {
            return (int)mh$.invokeExact(__file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"profil");
    }
    /**
     * {@snippet :
     * int profil(unsigned short* __sample_buffer, size_t __size, size_t __offset, unsigned int __scale);
     * }
     */
    public static int profil(MemorySegment __sample_buffer, long __size, long __offset, int __scale) {
        var mh$ = profil$MH();
        try {
            return (int)mh$.invokeExact(__sample_buffer, __size, __offset, __scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"acct");
    }
    /**
     * {@snippet :
     * int acct(char* __name);
     * }
     */
    public static int acct(MemorySegment __name) {
        var mh$ = acct$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"getusershell");
    }
    /**
     * {@snippet :
     * char* getusershell();
     * }
     */
    public static MemorySegment getusershell() {
        var mh$ = getusershell$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"endusershell");
    }
    /**
     * {@snippet :
     * void endusershell();
     * }
     */
    public static void endusershell() {
        var mh$ = endusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$3,"setusershell");
    }
    /**
     * {@snippet :
     * void setusershell();
     * }
     */
    public static void setusershell() {
        var mh$ = setusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle daemon$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"daemon");
    }
    /**
     * {@snippet :
     * int daemon(int __nochdir, int __noclose);
     * }
     */
    public static int daemon(int __nochdir, int __noclose) {
        var mh$ = daemon$MH();
        try {
            return (int)mh$.invokeExact(__nochdir, __noclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"chroot");
    }
    /**
     * {@snippet :
     * int chroot(char* __path);
     * }
     */
    public static int chroot(MemorySegment __path) {
        var mh$ = chroot$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$0,"getpass");
    }
    /**
     * {@snippet :
     * char* getpass(char* __prompt);
     * }
     */
    public static MemorySegment getpass(MemorySegment __prompt) {
        var mh$ = getpass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__prompt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"fsync");
    }
    /**
     * {@snippet :
     * int fsync(int __fd);
     * }
     */
    public static int fsync(int __fd) {
        var mh$ = fsync$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"gethostid");
    }
    /**
     * {@snippet :
     * long gethostid();
     * }
     */
    public static long gethostid() {
        var mh$ = gethostid$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"sync");
    }
    /**
     * {@snippet :
     * void sync();
     * }
     */
    public static void sync() {
        var mh$ = sync$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$4,"getpagesize");
    }
    /**
     * {@snippet :
     * int getpagesize();
     * }
     */
    public static int getpagesize() {
        var mh$ = getpagesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"getdtablesize");
    }
    /**
     * {@snippet :
     * int getdtablesize();
     * }
     */
    public static int getdtablesize() {
        var mh$ = getdtablesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$0,"truncate");
    }
    /**
     * {@snippet :
     * int truncate(char* __file, __off_t __length);
     * }
     */
    public static int truncate(MemorySegment __file, long __length) {
        var mh$ = truncate$MH();
        try {
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$2,"ftruncate");
    }
    /**
     * {@snippet :
     * int ftruncate(int __fd, __off_t __length);
     * }
     */
    public static int ftruncate(int __fd, long __length) {
        var mh$ = ftruncate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"brk");
    }
    /**
     * {@snippet :
     * int brk(void* __addr);
     * }
     */
    public static int brk(MemorySegment __addr) {
        var mh$ = brk$MH();
        try {
            return (int)mh$.invokeExact(__addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"sbrk");
    }
    /**
     * {@snippet :
     * void* sbrk(intptr_t __delta);
     * }
     */
    public static MemorySegment sbrk(long __delta) {
        var mh$ = sbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"syscall");
    }
    /**
     * {@snippet :
     * long syscall(long __sysno,...);
     * }
     */
    public static long syscall(long __sysno, Object... x1) {
        var mh$ = syscall$MH();
        try {
            return (long)mh$.invokeExact(__sysno, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"lockf");
    }
    /**
     * {@snippet :
     * int lockf(int __fd, int __cmd, __off_t __len);
     * }
     */
    public static int lockf(int __fd, int __cmd, long __len) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdatasync$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"fdatasync");
    }
    /**
     * {@snippet :
     * int fdatasync(int __fildes);
     * }
     */
    public static int fdatasync(int __fildes) {
        var mh$ = fdatasync$MH();
        try {
            return (int)mh$.invokeExact(__fildes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"crypt");
    }
    /**
     * {@snippet :
     * char* crypt(char* __key, char* __salt);
     * }
     */
    public static MemorySegment crypt(MemorySegment __key, MemorySegment __salt) {
        var mh$ = crypt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __salt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getentropy$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"getentropy");
    }
    /**
     * {@snippet :
     * int getentropy(void* __buffer, size_t __length);
     * }
     */
    public static int getentropy(MemorySegment __buffer, long __length) {
        var mh$ = getentropy$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int ENetSocket;
     * }
     */
    public static final OfInt ENetSocket = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char enet_uint8;
     * }
     */
    public static final OfByte enet_uint8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short enet_uint16;
     * }
     */
    public static final OfShort enet_uint16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int enet_uint32;
     * }
     */
    public static final OfInt enet_uint32 = JAVA_INT;
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MINIMUM_MTU = 576;
     * }
     */
    public static int ENET_PROTOCOL_MINIMUM_MTU() {
        return (int)576L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MAXIMUM_MTU = 4096;
     * }
     */
    public static int ENET_PROTOCOL_MAXIMUM_MTU() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS = 32;
     * }
     */
    public static int ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MINIMUM_WINDOW_SIZE = 4096;
     * }
     */
    public static int ENET_PROTOCOL_MINIMUM_WINDOW_SIZE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE = 65536;
     * }
     */
    public static int ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT = 1;
     * }
     */
    public static int ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT = 255;
     * }
     */
    public static int ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MAXIMUM_PEER_ID = 4095;
     * }
     */
    public static int ENET_PROTOCOL_MAXIMUM_PEER_ID() {
        return (int)4095L;
    }
    /**
     * {@snippet :
     * enum .ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT = 1048576;
     * }
     */
    public static int ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_NONE = 0;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_ACKNOWLEDGE = 1;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_ACKNOWLEDGE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_CONNECT = 2;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_CONNECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_VERIFY_CONNECT = 3;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_VERIFY_CONNECT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_DISCONNECT = 4;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_DISCONNECT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_PING = 5;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_PING() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_SEND_RELIABLE = 6;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_SEND_RELIABLE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE = 7;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_SEND_FRAGMENT = 8;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_SEND_FRAGMENT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED = 9;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT = 10;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE = 11;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT = 12;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_COUNT = 13;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_COUNT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolCommand.ENET_PROTOCOL_COMMAND_MASK = 15;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_MASK() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE = 128;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED = 64;
     * }
     */
    public static int ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_HEADER_FLAG_COMPRESSED = 16384;
     * }
     */
    public static int ENET_PROTOCOL_HEADER_FLAG_COMPRESSED() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_HEADER_FLAG_SENT_TIME = 32768;
     * }
     */
    public static int ENET_PROTOCOL_HEADER_FLAG_SENT_TIME() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_HEADER_FLAG_MASK = 49152;
     * }
     */
    public static int ENET_PROTOCOL_HEADER_FLAG_MASK() {
        return (int)49152L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_HEADER_SESSION_MASK = 12288;
     * }
     */
    public static int ENET_PROTOCOL_HEADER_SESSION_MASK() {
        return (int)12288L;
    }
    /**
     * {@snippet :
     * enum _ENetProtocolFlag.ENET_PROTOCOL_HEADER_SESSION_SHIFT = 12;
     * }
     */
    public static int ENET_PROTOCOL_HEADER_SESSION_SHIFT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * typedef struct _ENetListNode* ENetListIterator;
     * }
     */
    public static final AddressLayout ENetListIterator = RuntimeHelper.POINTER;
    public static MethodHandle enet_list_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$3,"enet_list_clear");
    }
    /**
     * {@snippet :
     * void enet_list_clear(ENetList*);
     * }
     */
    public static void enet_list_clear(MemorySegment x0) {
        var mh$ = enet_list_clear$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"enet_list_insert");
    }
    /**
     * {@snippet :
     * ENetListIterator enet_list_insert(ENetListIterator, void*);
     * }
     */
    public static MemorySegment enet_list_insert(MemorySegment x0, MemorySegment x1) {
        var mh$ = enet_list_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$5,"enet_list_remove");
    }
    /**
     * {@snippet :
     * void* enet_list_remove(ENetListIterator);
     * }
     */
    public static MemorySegment enet_list_remove(MemorySegment x0) {
        var mh$ = enet_list_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_move$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"enet_list_move");
    }
    /**
     * {@snippet :
     * ENetListIterator enet_list_move(ENetListIterator, void*, void*);
     * }
     */
    public static MemorySegment enet_list_move(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = enet_list_move$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_size$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$2,"enet_list_size");
    }
    /**
     * {@snippet :
     * size_t enet_list_size(ENetList*);
     * }
     */
    public static long enet_list_size(MemorySegment x0) {
        var mh$ = enet_list_size$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$0,"enet_malloc");
    }
    /**
     * {@snippet :
     * void* enet_malloc(size_t);
     * }
     */
    public static MemorySegment enet_malloc(long x0) {
        var mh$ = enet_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_free$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$1,"enet_free");
    }
    /**
     * {@snippet :
     * void enet_free(void*);
     * }
     */
    public static void enet_free(MemorySegment x0) {
        var mh$ = enet_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int ENetVersion;
     * }
     */
    public static final OfInt ENetVersion = JAVA_INT;
    /**
     * {@snippet :
     * enum _ENetSocketType.ENET_SOCKET_TYPE_STREAM = 1;
     * }
     */
    public static int ENET_SOCKET_TYPE_STREAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketType.ENET_SOCKET_TYPE_DATAGRAM = 2;
     * }
     */
    public static int ENET_SOCKET_TYPE_DATAGRAM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketWait.ENET_SOCKET_WAIT_NONE = 0;
     * }
     */
    public static int ENET_SOCKET_WAIT_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketWait.ENET_SOCKET_WAIT_SEND = 1;
     * }
     */
    public static int ENET_SOCKET_WAIT_SEND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketWait.ENET_SOCKET_WAIT_RECEIVE = 2;
     * }
     */
    public static int ENET_SOCKET_WAIT_RECEIVE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketWait.ENET_SOCKET_WAIT_INTERRUPT = 4;
     * }
     */
    public static int ENET_SOCKET_WAIT_INTERRUPT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_NONBLOCK = 1;
     * }
     */
    public static int ENET_SOCKOPT_NONBLOCK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_BROADCAST = 2;
     * }
     */
    public static int ENET_SOCKOPT_BROADCAST() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_RCVBUF = 3;
     * }
     */
    public static int ENET_SOCKOPT_RCVBUF() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_SNDBUF = 4;
     * }
     */
    public static int ENET_SOCKOPT_SNDBUF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_REUSEADDR = 5;
     * }
     */
    public static int ENET_SOCKOPT_REUSEADDR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_RCVTIMEO = 6;
     * }
     */
    public static int ENET_SOCKOPT_RCVTIMEO() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_SNDTIMEO = 7;
     * }
     */
    public static int ENET_SOCKOPT_SNDTIMEO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_ERROR = 8;
     * }
     */
    public static int ENET_SOCKOPT_ERROR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketOption.ENET_SOCKOPT_NODELAY = 9;
     * }
     */
    public static int ENET_SOCKOPT_NODELAY() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketShutdown.ENET_SOCKET_SHUTDOWN_READ = 0;
     * }
     */
    public static int ENET_SOCKET_SHUTDOWN_READ() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketShutdown.ENET_SOCKET_SHUTDOWN_WRITE = 1;
     * }
     */
    public static int ENET_SOCKET_SHUTDOWN_WRITE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetSocketShutdown.ENET_SOCKET_SHUTDOWN_READ_WRITE = 2;
     * }
     */
    public static int ENET_SOCKET_SHUTDOWN_READ_WRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetPacketFlag.ENET_PACKET_FLAG_RELIABLE = 1;
     * }
     */
    public static int ENET_PACKET_FLAG_RELIABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetPacketFlag.ENET_PACKET_FLAG_UNSEQUENCED = 2;
     * }
     */
    public static int ENET_PACKET_FLAG_UNSEQUENCED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetPacketFlag.ENET_PACKET_FLAG_NO_ALLOCATE = 4;
     * }
     */
    public static int ENET_PACKET_FLAG_NO_ALLOCATE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _ENetPacketFlag.ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT = 8;
     * }
     */
    public static int ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _ENetPacketFlag.ENET_PACKET_FLAG_SENT = 256;
     * }
     */
    public static int ENET_PACKET_FLAG_SENT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_DISCONNECTED = 0;
     * }
     */
    public static int ENET_PEER_STATE_DISCONNECTED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_CONNECTING = 1;
     * }
     */
    public static int ENET_PEER_STATE_CONNECTING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_ACKNOWLEDGING_CONNECT = 2;
     * }
     */
    public static int ENET_PEER_STATE_ACKNOWLEDGING_CONNECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_CONNECTION_PENDING = 3;
     * }
     */
    public static int ENET_PEER_STATE_CONNECTION_PENDING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_CONNECTION_SUCCEEDED = 4;
     * }
     */
    public static int ENET_PEER_STATE_CONNECTION_SUCCEEDED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_CONNECTED = 5;
     * }
     */
    public static int ENET_PEER_STATE_CONNECTED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_DISCONNECT_LATER = 6;
     * }
     */
    public static int ENET_PEER_STATE_DISCONNECT_LATER() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_DISCONNECTING = 7;
     * }
     */
    public static int ENET_PEER_STATE_DISCONNECTING() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT = 8;
     * }
     */
    public static int ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerState.ENET_PEER_STATE_ZOMBIE = 9;
     * }
     */
    public static int ENET_PEER_STATE_ZOMBIE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .ENET_HOST_RECEIVE_BUFFER_SIZE = 262144;
     * }
     */
    public static int ENET_HOST_RECEIVE_BUFFER_SIZE() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum .ENET_HOST_SEND_BUFFER_SIZE = 262144;
     * }
     */
    public static int ENET_HOST_SEND_BUFFER_SIZE() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum .ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL = 1000;
     * }
     */
    public static int ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * enum .ENET_HOST_DEFAULT_MTU = 1400;
     * }
     */
    public static int ENET_HOST_DEFAULT_MTU() {
        return (int)1400L;
    }
    /**
     * {@snippet :
     * enum .ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE = 33554432;
     * }
     */
    public static int ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum .ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA = 33554432;
     * }
     */
    public static int ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_DEFAULT_ROUND_TRIP_TIME = 500;
     * }
     */
    public static int ENET_PEER_DEFAULT_ROUND_TRIP_TIME() {
        return (int)500L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_DEFAULT_PACKET_THROTTLE = 32;
     * }
     */
    public static int ENET_PEER_DEFAULT_PACKET_THROTTLE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_THROTTLE_SCALE = 32;
     * }
     */
    public static int ENET_PEER_PACKET_THROTTLE_SCALE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_THROTTLE_COUNTER = 7;
     * }
     */
    public static int ENET_PEER_PACKET_THROTTLE_COUNTER() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_THROTTLE_ACCELERATION = 2;
     * }
     */
    public static int ENET_PEER_PACKET_THROTTLE_ACCELERATION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_THROTTLE_DECELERATION = 2;
     * }
     */
    public static int ENET_PEER_PACKET_THROTTLE_DECELERATION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_THROTTLE_INTERVAL = 5000;
     * }
     */
    public static int ENET_PEER_PACKET_THROTTLE_INTERVAL() {
        return (int)5000L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_LOSS_SCALE = 65536;
     * }
     */
    public static int ENET_PEER_PACKET_LOSS_SCALE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PACKET_LOSS_INTERVAL = 10000;
     * }
     */
    public static int ENET_PEER_PACKET_LOSS_INTERVAL() {
        return (int)10000L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_WINDOW_SIZE_SCALE = 65536;
     * }
     */
    public static int ENET_PEER_WINDOW_SIZE_SCALE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_TIMEOUT_LIMIT = 32;
     * }
     */
    public static int ENET_PEER_TIMEOUT_LIMIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_TIMEOUT_MINIMUM = 5000;
     * }
     */
    public static int ENET_PEER_TIMEOUT_MINIMUM() {
        return (int)5000L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_TIMEOUT_MAXIMUM = 30000;
     * }
     */
    public static int ENET_PEER_TIMEOUT_MAXIMUM() {
        return (int)30000L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_PING_INTERVAL = 500;
     * }
     */
    public static int ENET_PEER_PING_INTERVAL() {
        return (int)500L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_UNSEQUENCED_WINDOWS = 64;
     * }
     */
    public static int ENET_PEER_UNSEQUENCED_WINDOWS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_UNSEQUENCED_WINDOW_SIZE = 1024;
     * }
     */
    public static int ENET_PEER_UNSEQUENCED_WINDOW_SIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_FREE_UNSEQUENCED_WINDOWS = 32;
     * }
     */
    public static int ENET_PEER_FREE_UNSEQUENCED_WINDOWS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_RELIABLE_WINDOWS = 16;
     * }
     */
    public static int ENET_PEER_RELIABLE_WINDOWS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_RELIABLE_WINDOW_SIZE = 4096;
     * }
     */
    public static int ENET_PEER_RELIABLE_WINDOW_SIZE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .ENET_PEER_FREE_RELIABLE_WINDOWS = 8;
     * }
     */
    public static int ENET_PEER_FREE_RELIABLE_WINDOWS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _ENetPeerFlag.ENET_PEER_FLAG_NEEDS_DISPATCH = 1;
     * }
     */
    public static int ENET_PEER_FLAG_NEEDS_DISPATCH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetEventType.ENET_EVENT_TYPE_NONE = 0;
     * }
     */
    public static int ENET_EVENT_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ENetEventType.ENET_EVENT_TYPE_CONNECT = 1;
     * }
     */
    public static int ENET_EVENT_TYPE_CONNECT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ENetEventType.ENET_EVENT_TYPE_DISCONNECT = 2;
     * }
     */
    public static int ENET_EVENT_TYPE_DISCONNECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _ENetEventType.ENET_EVENT_TYPE_RECEIVE = 3;
     * }
     */
    public static int ENET_EVENT_TYPE_RECEIVE() {
        return (int)3L;
    }
    public static MethodHandle enet_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$4,"enet_initialize");
    }
    /**
     * {@snippet :
     * int enet_initialize();
     * }
     */
    public static int enet_initialize() {
        var mh$ = enet_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_initialize_with_callbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$5,"enet_initialize_with_callbacks");
    }
    /**
     * {@snippet :
     * int enet_initialize_with_callbacks(ENetVersion version, const ENetCallbacks* inits);
     * }
     */
    public static int enet_initialize_with_callbacks(int version, MemorySegment inits) {
        var mh$ = enet_initialize_with_callbacks$MH();
        try {
            return (int)mh$.invokeExact(version, inits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_deinitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$0,"enet_deinitialize");
    }
    /**
     * {@snippet :
     * void enet_deinitialize();
     * }
     */
    public static void enet_deinitialize() {
        var mh$ = enet_deinitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_linked_version$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$1,"enet_linked_version");
    }
    /**
     * {@snippet :
     * ENetVersion enet_linked_version();
     * }
     */
    public static int enet_linked_version() {
        var mh$ = enet_linked_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_time_get$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$2,"enet_time_get");
    }
    /**
     * {@snippet :
     * enet_uint32 enet_time_get();
     * }
     */
    public static int enet_time_get() {
        var mh$ = enet_time_get$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_time_set$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$3,"enet_time_set");
    }
    /**
     * {@snippet :
     * void enet_time_set(enet_uint32);
     * }
     */
    public static void enet_time_set(int x0) {
        var mh$ = enet_time_set$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_create$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$4,"enet_socket_create");
    }
    /**
     * {@snippet :
     * ENetSocket enet_socket_create(ENetSocketType);
     * }
     */
    public static int enet_socket_create(int x0) {
        var mh$ = enet_socket_create$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_bind$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$5,"enet_socket_bind");
    }
    /**
     * {@snippet :
     * int enet_socket_bind(ENetSocket, const ENetAddress*);
     * }
     */
    public static int enet_socket_bind(int x0, MemorySegment x1) {
        var mh$ = enet_socket_bind$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_get_address$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$0,"enet_socket_get_address");
    }
    /**
     * {@snippet :
     * int enet_socket_get_address(ENetSocket, ENetAddress*);
     * }
     */
    public static int enet_socket_get_address(int x0, MemorySegment x1) {
        var mh$ = enet_socket_get_address$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_listen$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$1,"enet_socket_listen");
    }
    /**
     * {@snippet :
     * int enet_socket_listen(ENetSocket, int);
     * }
     */
    public static int enet_socket_listen(int x0, int x1) {
        var mh$ = enet_socket_listen$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$2,"enet_socket_accept");
    }
    /**
     * {@snippet :
     * ENetSocket enet_socket_accept(ENetSocket, ENetAddress*);
     * }
     */
    public static int enet_socket_accept(int x0, MemorySegment x1) {
        var mh$ = enet_socket_accept$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$3,"enet_socket_connect");
    }
    /**
     * {@snippet :
     * int enet_socket_connect(ENetSocket, const ENetAddress*);
     * }
     */
    public static int enet_socket_connect(int x0, MemorySegment x1) {
        var mh$ = enet_socket_connect$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_send$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$4,"enet_socket_send");
    }
    /**
     * {@snippet :
     * int enet_socket_send(ENetSocket, const ENetAddress*, const ENetBuffer*, size_t);
     * }
     */
    public static int enet_socket_send(int x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = enet_socket_send$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_receive$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$5,"enet_socket_receive");
    }
    /**
     * {@snippet :
     * int enet_socket_receive(ENetSocket, ENetAddress*, ENetBuffer*, size_t);
     * }
     */
    public static int enet_socket_receive(int x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = enet_socket_receive$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$0,"enet_socket_wait");
    }
    /**
     * {@snippet :
     * int enet_socket_wait(ENetSocket, enet_uint32*, enet_uint32);
     * }
     */
    public static int enet_socket_wait(int x0, MemorySegment x1, int x2) {
        var mh$ = enet_socket_wait$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_set_option$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$1,"enet_socket_set_option");
    }
    /**
     * {@snippet :
     * int enet_socket_set_option(ENetSocket, ENetSocketOption, int);
     * }
     */
    public static int enet_socket_set_option(int x0, int x1, int x2) {
        var mh$ = enet_socket_set_option$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_get_option$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$3,"enet_socket_get_option");
    }
    /**
     * {@snippet :
     * int enet_socket_get_option(ENetSocket, ENetSocketOption, int*);
     * }
     */
    public static int enet_socket_get_option(int x0, int x1, MemorySegment x2) {
        var mh$ = enet_socket_get_option$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$4,"enet_socket_shutdown");
    }
    /**
     * {@snippet :
     * int enet_socket_shutdown(ENetSocket, ENetSocketShutdown);
     * }
     */
    public static int enet_socket_shutdown(int x0, int x1) {
        var mh$ = enet_socket_shutdown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$5,"enet_socket_destroy");
    }
    /**
     * {@snippet :
     * void enet_socket_destroy(ENetSocket);
     * }
     */
    public static void enet_socket_destroy(int x0) {
        var mh$ = enet_socket_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socketset_select$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$1,"enet_socketset_select");
    }
    /**
     * {@snippet :
     * int enet_socketset_select(ENetSocket, ENetSocketSet*, ENetSocketSet*, enet_uint32);
     * }
     */
    public static int enet_socketset_select(int x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = enet_socketset_select$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_set_host_ip$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$2,"enet_address_set_host_ip");
    }
    /**
     * {@snippet :
     * int enet_address_set_host_ip(ENetAddress* address, char* hostName);
     * }
     */
    public static int enet_address_set_host_ip(MemorySegment address, MemorySegment hostName) {
        var mh$ = enet_address_set_host_ip$MH();
        try {
            return (int)mh$.invokeExact(address, hostName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_set_host$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$3,"enet_address_set_host");
    }
    /**
     * {@snippet :
     * int enet_address_set_host(ENetAddress* address, char* hostName);
     * }
     */
    public static int enet_address_set_host(MemorySegment address, MemorySegment hostName) {
        var mh$ = enet_address_set_host$MH();
        try {
            return (int)mh$.invokeExact(address, hostName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_get_host_ip$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$4,"enet_address_get_host_ip");
    }
    /**
     * {@snippet :
     * int enet_address_get_host_ip(const ENetAddress* address, char* hostName, size_t nameLength);
     * }
     */
    public static int enet_address_get_host_ip(MemorySegment address, MemorySegment hostName, long nameLength) {
        var mh$ = enet_address_get_host_ip$MH();
        try {
            return (int)mh$.invokeExact(address, hostName, nameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_get_host$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$5,"enet_address_get_host");
    }
    /**
     * {@snippet :
     * int enet_address_get_host(const ENetAddress* address, char* hostName, size_t nameLength);
     * }
     */
    public static int enet_address_get_host(MemorySegment address, MemorySegment hostName, long nameLength) {
        var mh$ = enet_address_get_host$MH();
        try {
            return (int)mh$.invokeExact(address, hostName, nameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_packet_create$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$1,"enet_packet_create");
    }
    /**
     * {@snippet :
     * ENetPacket* enet_packet_create(void*, size_t, enet_uint32);
     * }
     */
    public static MemorySegment enet_packet_create(MemorySegment x0, long x1, int x2) {
        var mh$ = enet_packet_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_packet_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$2,"enet_packet_destroy");
    }
    /**
     * {@snippet :
     * void enet_packet_destroy(ENetPacket*);
     * }
     */
    public static void enet_packet_destroy(MemorySegment x0) {
        var mh$ = enet_packet_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_packet_resize$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$3,"enet_packet_resize");
    }
    /**
     * {@snippet :
     * int enet_packet_resize(ENetPacket*, size_t);
     * }
     */
    public static int enet_packet_resize(MemorySegment x0, long x1) {
        var mh$ = enet_packet_resize$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_crc32$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$4,"enet_crc32");
    }
    /**
     * {@snippet :
     * enet_uint32 enet_crc32(const ENetBuffer*, size_t);
     * }
     */
    public static int enet_crc32(MemorySegment x0, long x1) {
        var mh$ = enet_crc32$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_create$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$6,"enet_host_create");
    }
    /**
     * {@snippet :
     * ENetHost* enet_host_create(const ENetAddress*, size_t, size_t, enet_uint32, enet_uint32);
     * }
     */
    public static MemorySegment enet_host_create(MemorySegment x0, long x1, long x2, int x3, int x4) {
        var mh$ = enet_host_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$0,"enet_host_destroy");
    }
    /**
     * {@snippet :
     * void enet_host_destroy(ENetHost*);
     * }
     */
    public static void enet_host_destroy(MemorySegment x0) {
        var mh$ = enet_host_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$2,"enet_host_connect");
    }
    /**
     * {@snippet :
     * ENetPeer* enet_host_connect(ENetHost*, const ENetAddress*, size_t, enet_uint32);
     * }
     */
    public static MemorySegment enet_host_connect(MemorySegment x0, MemorySegment x1, long x2, int x3) {
        var mh$ = enet_host_connect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_check_events$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$3,"enet_host_check_events");
    }
    /**
     * {@snippet :
     * int enet_host_check_events(ENetHost*, ENetEvent*);
     * }
     */
    public static int enet_host_check_events(MemorySegment x0, MemorySegment x1) {
        var mh$ = enet_host_check_events$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_service$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"enet_host_service");
    }
    /**
     * {@snippet :
     * int enet_host_service(ENetHost*, ENetEvent*, enet_uint32);
     * }
     */
    public static int enet_host_service(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = enet_host_service$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$5,"enet_host_flush");
    }
    /**
     * {@snippet :
     * void enet_host_flush(ENetHost*);
     * }
     */
    public static void enet_host_flush(MemorySegment x0) {
        var mh$ = enet_host_flush$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$1,"enet_host_broadcast");
    }
    /**
     * {@snippet :
     * void enet_host_broadcast(ENetHost*, enet_uint8, ENetPacket*);
     * }
     */
    public static void enet_host_broadcast(MemorySegment x0, byte x1, MemorySegment x2) {
        var mh$ = enet_host_broadcast$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_compress$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$3,"enet_host_compress");
    }
    /**
     * {@snippet :
     * void enet_host_compress(ENetHost*, const ENetCompressor*);
     * }
     */
    public static void enet_host_compress(MemorySegment x0, MemorySegment x1) {
        var mh$ = enet_host_compress$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_compress_with_range_coder$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$4,"enet_host_compress_with_range_coder");
    }
    /**
     * {@snippet :
     * int enet_host_compress_with_range_coder(ENetHost* host);
     * }
     */
    public static int enet_host_compress_with_range_coder(MemorySegment host) {
        var mh$ = enet_host_compress_with_range_coder$MH();
        try {
            return (int)mh$.invokeExact(host);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_channel_limit$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$5,"enet_host_channel_limit");
    }
    /**
     * {@snippet :
     * void enet_host_channel_limit(ENetHost*, size_t);
     * }
     */
    public static void enet_host_channel_limit(MemorySegment x0, long x1) {
        var mh$ = enet_host_channel_limit$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_bandwidth_limit$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$1,"enet_host_bandwidth_limit");
    }
    /**
     * {@snippet :
     * void enet_host_bandwidth_limit(ENetHost*, enet_uint32, enet_uint32);
     * }
     */
    public static void enet_host_bandwidth_limit(MemorySegment x0, int x1, int x2) {
        var mh$ = enet_host_bandwidth_limit$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_bandwidth_throttle$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$2,"enet_host_bandwidth_throttle");
    }
    /**
     * {@snippet :
     * void enet_host_bandwidth_throttle(ENetHost*);
     * }
     */
    public static void enet_host_bandwidth_throttle(MemorySegment x0) {
        var mh$ = enet_host_bandwidth_throttle$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_random_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"enet_host_random_seed");
    }
    /**
     * {@snippet :
     * enet_uint32 enet_host_random_seed();
     * }
     */
    public static int enet_host_random_seed() {
        var mh$ = enet_host_random_seed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_send$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$5,"enet_peer_send");
    }
    /**
     * {@snippet :
     * int enet_peer_send(ENetPeer*, enet_uint8, ENetPacket*);
     * }
     */
    public static int enet_peer_send(MemorySegment x0, byte x1, MemorySegment x2) {
        var mh$ = enet_peer_send$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_receive$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$0,"enet_peer_receive");
    }
    /**
     * {@snippet :
     * ENetPacket* enet_peer_receive(ENetPeer*, enet_uint8* channelID);
     * }
     */
    public static MemorySegment enet_peer_receive(MemorySegment x0, MemorySegment channelID) {
        var mh$ = enet_peer_receive$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, channelID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_ping$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$1,"enet_peer_ping");
    }
    /**
     * {@snippet :
     * void enet_peer_ping(ENetPeer*);
     * }
     */
    public static void enet_peer_ping(MemorySegment x0) {
        var mh$ = enet_peer_ping$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_ping_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$3,"enet_peer_ping_interval");
    }
    /**
     * {@snippet :
     * void enet_peer_ping_interval(ENetPeer*, enet_uint32);
     * }
     */
    public static void enet_peer_ping_interval(MemorySegment x0, int x1) {
        var mh$ = enet_peer_ping_interval$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$5,"enet_peer_timeout");
    }
    /**
     * {@snippet :
     * void enet_peer_timeout(ENetPeer*, enet_uint32, enet_uint32, enet_uint32);
     * }
     */
    public static void enet_peer_timeout(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = enet_peer_timeout$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$0,"enet_peer_reset");
    }
    /**
     * {@snippet :
     * void enet_peer_reset(ENetPeer*);
     * }
     */
    public static void enet_peer_reset(MemorySegment x0) {
        var mh$ = enet_peer_reset$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_disconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$1,"enet_peer_disconnect");
    }
    /**
     * {@snippet :
     * void enet_peer_disconnect(ENetPeer*, enet_uint32);
     * }
     */
    public static void enet_peer_disconnect(MemorySegment x0, int x1) {
        var mh$ = enet_peer_disconnect$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_disconnect_now$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$2,"enet_peer_disconnect_now");
    }
    /**
     * {@snippet :
     * void enet_peer_disconnect_now(ENetPeer*, enet_uint32);
     * }
     */
    public static void enet_peer_disconnect_now(MemorySegment x0, int x1) {
        var mh$ = enet_peer_disconnect_now$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_disconnect_later$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$3,"enet_peer_disconnect_later");
    }
    /**
     * {@snippet :
     * void enet_peer_disconnect_later(ENetPeer*, enet_uint32);
     * }
     */
    public static void enet_peer_disconnect_later(MemorySegment x0, int x1) {
        var mh$ = enet_peer_disconnect_later$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_throttle_configure$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$4,"enet_peer_throttle_configure");
    }
    /**
     * {@snippet :
     * void enet_peer_throttle_configure(ENetPeer*, enet_uint32, enet_uint32, enet_uint32);
     * }
     */
    public static void enet_peer_throttle_configure(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = enet_peer_throttle_configure$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_throttle$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$5,"enet_peer_throttle");
    }
    /**
     * {@snippet :
     * int enet_peer_throttle(ENetPeer*, enet_uint32);
     * }
     */
    public static int enet_peer_throttle(MemorySegment x0, int x1) {
        var mh$ = enet_peer_throttle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_reset_queues$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$0,"enet_peer_reset_queues");
    }
    /**
     * {@snippet :
     * void enet_peer_reset_queues(ENetPeer*);
     * }
     */
    public static void enet_peer_reset_queues(MemorySegment x0) {
        var mh$ = enet_peer_reset_queues$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_setup_outgoing_command$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$1,"enet_peer_setup_outgoing_command");
    }
    /**
     * {@snippet :
     * void enet_peer_setup_outgoing_command(ENetPeer*, ENetOutgoingCommand*);
     * }
     */
    public static void enet_peer_setup_outgoing_command(MemorySegment x0, MemorySegment x1) {
        var mh$ = enet_peer_setup_outgoing_command$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_queue_outgoing_command$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$3,"enet_peer_queue_outgoing_command");
    }
    /**
     * {@snippet :
     * ENetOutgoingCommand* enet_peer_queue_outgoing_command(ENetPeer*, const ENetProtocol*, ENetPacket*, enet_uint32, enet_uint16);
     * }
     */
    public static MemorySegment enet_peer_queue_outgoing_command(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, short x4) {
        var mh$ = enet_peer_queue_outgoing_command$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_queue_incoming_command$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$5,"enet_peer_queue_incoming_command");
    }
    /**
     * {@snippet :
     * ENetIncomingCommand* enet_peer_queue_incoming_command(ENetPeer*, const ENetProtocol*, void*, size_t, enet_uint32, enet_uint32);
     * }
     */
    public static MemorySegment enet_peer_queue_incoming_command(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3, int x4, int x5) {
        var mh$ = enet_peer_queue_incoming_command$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_queue_acknowledgement$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$1,"enet_peer_queue_acknowledgement");
    }
    /**
     * {@snippet :
     * ENetAcknowledgement* enet_peer_queue_acknowledgement(ENetPeer*, const ENetProtocol*, enet_uint16);
     * }
     */
    public static MemorySegment enet_peer_queue_acknowledgement(MemorySegment x0, MemorySegment x1, short x2) {
        var mh$ = enet_peer_queue_acknowledgement$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_dispatch_incoming_unreliable_commands$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$3,"enet_peer_dispatch_incoming_unreliable_commands");
    }
    /**
     * {@snippet :
     * void enet_peer_dispatch_incoming_unreliable_commands(ENetPeer*, ENetChannel*, ENetIncomingCommand*);
     * }
     */
    public static void enet_peer_dispatch_incoming_unreliable_commands(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = enet_peer_dispatch_incoming_unreliable_commands$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_dispatch_incoming_reliable_commands$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$4,"enet_peer_dispatch_incoming_reliable_commands");
    }
    /**
     * {@snippet :
     * void enet_peer_dispatch_incoming_reliable_commands(ENetPeer*, ENetChannel*, ENetIncomingCommand*);
     * }
     */
    public static void enet_peer_dispatch_incoming_reliable_commands(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = enet_peer_dispatch_incoming_reliable_commands$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_on_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$5,"enet_peer_on_connect");
    }
    /**
     * {@snippet :
     * void enet_peer_on_connect(ENetPeer*);
     * }
     */
    public static void enet_peer_on_connect(MemorySegment x0) {
        var mh$ = enet_peer_on_connect$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_on_disconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$0,"enet_peer_on_disconnect");
    }
    /**
     * {@snippet :
     * void enet_peer_on_disconnect(ENetPeer*);
     * }
     */
    public static void enet_peer_on_disconnect(MemorySegment x0) {
        var mh$ = enet_peer_on_disconnect$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_create$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$1,"enet_range_coder_create");
    }
    /**
     * {@snippet :
     * void* enet_range_coder_create();
     * }
     */
    public static MemorySegment enet_range_coder_create() {
        var mh$ = enet_range_coder_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$2,"enet_range_coder_destroy");
    }
    /**
     * {@snippet :
     * void enet_range_coder_destroy(void*);
     * }
     */
    public static void enet_range_coder_destroy(MemorySegment x0) {
        var mh$ = enet_range_coder_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_compress$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$3,"enet_range_coder_compress");
    }
    /**
     * {@snippet :
     * size_t enet_range_coder_compress(void*, const ENetBuffer*, size_t, size_t, enet_uint8*, size_t);
     * }
     */
    public static long enet_range_coder_compress(MemorySegment x0, MemorySegment x1, long x2, long x3, MemorySegment x4, long x5) {
        var mh$ = enet_range_coder_compress$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_decompress$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$4,"enet_range_coder_decompress");
    }
    /**
     * {@snippet :
     * size_t enet_range_coder_decompress(void*, const enet_uint8*, size_t, enet_uint8*, size_t);
     * }
     */
    public static long enet_range_coder_decompress(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3, long x4) {
        var mh$ = enet_range_coder_decompress$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_protocol_command_size$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$6,"enet_protocol_command_size");
    }
    /**
     * {@snippet :
     * size_t enet_protocol_command_size(enet_uint8);
     * }
     */
    public static long enet_protocol_command_size(byte x0) {
        var mh$ = enet_protocol_command_size$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$131.const$0;
    }
    /**
     * {@snippet :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define PF_UNIX 1
     * }
     */
    public static int PF_UNIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define PF_FILE 1
     * }
     */
    public static int PF_FILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define PF_ROUTE 16
     * }
     */
    public static int PF_ROUTE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AF_UNSPEC 0
     * }
     */
    public static int AF_UNSPEC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AF_LOCAL 1
     * }
     */
    public static int AF_LOCAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AF_UNIX 1
     * }
     */
    public static int AF_UNIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AF_FILE 1
     * }
     */
    public static int AF_FILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AF_INET 2
     * }
     */
    public static int AF_INET() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define AF_AX25 3
     * }
     */
    public static int AF_AX25() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define AF_IPX 4
     * }
     */
    public static int AF_IPX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define AF_APPLETALK 5
     * }
     */
    public static int AF_APPLETALK() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define AF_NETROM 6
     * }
     */
    public static int AF_NETROM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define AF_BRIDGE 7
     * }
     */
    public static int AF_BRIDGE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define AF_ATMPVC 8
     * }
     */
    public static int AF_ATMPVC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AF_X25 9
     * }
     */
    public static int AF_X25() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define AF_INET6 10
     * }
     */
    public static int AF_INET6() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define AF_ROSE 11
     * }
     */
    public static int AF_ROSE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define AF_DECnet 12
     * }
     */
    public static int AF_DECnet() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define AF_NETBEUI 13
     * }
     */
    public static int AF_NETBEUI() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define AF_SECURITY 14
     * }
     */
    public static int AF_SECURITY() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define AF_KEY 15
     * }
     */
    public static int AF_KEY() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define AF_NETLINK 16
     * }
     */
    public static int AF_NETLINK() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AF_ROUTE 16
     * }
     */
    public static int AF_ROUTE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define AF_PACKET 17
     * }
     */
    public static int AF_PACKET() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define AF_ASH 18
     * }
     */
    public static int AF_ASH() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define AF_ECONET 19
     * }
     */
    public static int AF_ECONET() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define AF_ATMSVC 20
     * }
     */
    public static int AF_ATMSVC() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define AF_RDS 21
     * }
     */
    public static int AF_RDS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define AF_SNA 22
     * }
     */
    public static int AF_SNA() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define AF_IRDA 23
     * }
     */
    public static int AF_IRDA() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define AF_PPPOX 24
     * }
     */
    public static int AF_PPPOX() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define AF_WANPIPE 25
     * }
     */
    public static int AF_WANPIPE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define AF_LLC 26
     * }
     */
    public static int AF_LLC() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define AF_IB 27
     * }
     */
    public static int AF_IB() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define AF_MPLS 28
     * }
     */
    public static int AF_MPLS() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define AF_CAN 29
     * }
     */
    public static int AF_CAN() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define AF_TIPC 30
     * }
     */
    public static int AF_TIPC() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define AF_BLUETOOTH 31
     * }
     */
    public static int AF_BLUETOOTH() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define AF_IUCV 32
     * }
     */
    public static int AF_IUCV() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define AF_RXRPC 33
     * }
     */
    public static int AF_RXRPC() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define AF_ISDN 34
     * }
     */
    public static int AF_ISDN() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define AF_PHONET 35
     * }
     */
    public static int AF_PHONET() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define AF_IEEE802154 36
     * }
     */
    public static int AF_IEEE802154() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define AF_CAIF 37
     * }
     */
    public static int AF_CAIF() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define AF_ALG 38
     * }
     */
    public static int AF_ALG() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define AF_NFC 39
     * }
     */
    public static int AF_NFC() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define AF_VSOCK 40
     * }
     */
    public static int AF_VSOCK() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define AF_KCM 41
     * }
     */
    public static int AF_KCM() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define AF_QIPCRTR 42
     * }
     */
    public static int AF_QIPCRTR() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define AF_SMC 43
     * }
     */
    public static int AF_SMC() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define AF_XDP 44
     * }
     */
    public static int AF_XDP() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define AF_MCTP 45
     * }
     */
    public static int AF_MCTP() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define AF_MAX 46
     * }
     */
    public static int AF_MAX() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define __SOCKADDR_COMMON_SIZE 2
     * }
     */
    public static long __SOCKADDR_COMMON_SIZE() {
        return 2L;
    }
    /**
     * {@snippet :
     * #define _SS_PADSIZE 118
     * }
     */
    public static long _SS_PADSIZE() {
        return 118L;
    }
    /**
     * {@snippet :
     * #define SO_GET_FILTER 26
     * }
     */
    public static int SO_GET_FILTER() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define SCM_WIFI_STATUS 41
     * }
     */
    public static int SCM_WIFI_STATUS() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define SO_DETACH_BPF 27
     * }
     */
    public static int SO_DETACH_BPF() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define SCM_TXTIME 61
     * }
     */
    public static int SCM_TXTIME() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMP 29
     * }
     */
    public static int SO_TIMESTAMP() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMPNS 35
     * }
     */
    public static int SO_TIMESTAMPNS() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define SO_TIMESTAMPING 37
     * }
     */
    public static int SO_TIMESTAMPING() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define SO_RCVTIMEO 20
     * }
     */
    public static int SO_RCVTIMEO() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define SO_SNDTIMEO 21
     * }
     */
    public static int SO_SNDTIMEO() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define SCM_TIMESTAMP 29
     * }
     */
    public static int SCM_TIMESTAMP() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define SCM_TIMESTAMPNS 35
     * }
     */
    public static int SCM_TIMESTAMPNS() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define SCM_TIMESTAMPING 37
     * }
     */
    public static int SCM_TIMESTAMPING() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define IP_RECVRETOPTS 7
     * }
     */
    public static int IP_RECVRETOPTS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define IP_RECVORIGDSTADDR 20
     * }
     */
    public static int IP_RECVORIGDSTADDR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define IPV6_RECVORIGDSTADDR 74
     * }
     */
    public static int IPV6_RECVORIGDSTADDR() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define IPV6_ADD_MEMBERSHIP 20
     * }
     */
    public static int IPV6_ADD_MEMBERSHIP() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define IPV6_DROP_MEMBERSHIP 21
     * }
     */
    public static int IPV6_DROP_MEMBERSHIP() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define IPV6_RXHOPOPTS 54
     * }
     */
    public static int IPV6_RXHOPOPTS() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define IPV6_RXDSTOPTS 59
     * }
     */
    public static int IPV6_RXDSTOPTS() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSA_NET 4278190080
     * }
     */
    public static int IN_CLASSA_NET() {
        return (int)4278190080L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSA_HOST 16777215
     * }
     */
    public static int IN_CLASSA_HOST() {
        return (int)16777215L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSB_NET 4294901760
     * }
     */
    public static int IN_CLASSB_NET() {
        return (int)4294901760L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSB_HOST 65535
     * }
     */
    public static int IN_CLASSB_HOST() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSC_NET 4294967040
     * }
     */
    public static int IN_CLASSC_NET() {
        return (int)4294967040L;
    }
    /**
     * {@snippet :
     * #define IN_CLASSC_HOST 255
     * }
     */
    public static int IN_CLASSC_HOST() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define INADDR_ANY 0
     * }
     */
    public static int INADDR_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define INADDR_BROADCAST 4294967295
     * }
     */
    public static int INADDR_BROADCAST() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define INADDR_NONE 4294967295
     * }
     */
    public static int INADDR_NONE() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define INADDR_DUMMY 3221225480
     * }
     */
    public static int INADDR_DUMMY() {
        return (int)3221225480L;
    }
    /**
     * {@snippet :
     * #define INADDR_LOOPBACK 2130706433
     * }
     */
    public static int INADDR_LOOPBACK() {
        return (int)2130706433L;
    }
    /**
     * {@snippet :
     * #define INADDR_UNSPEC_GROUP 3758096384
     * }
     */
    public static int INADDR_UNSPEC_GROUP() {
        return (int)3758096384L;
    }
    /**
     * {@snippet :
     * #define INADDR_ALLHOSTS_GROUP 3758096385
     * }
     */
    public static int INADDR_ALLHOSTS_GROUP() {
        return (int)3758096385L;
    }
    /**
     * {@snippet :
     * #define INADDR_ALLRTRS_GROUP 3758096386
     * }
     */
    public static int INADDR_ALLRTRS_GROUP() {
        return (int)3758096386L;
    }
    /**
     * {@snippet :
     * #define INADDR_ALLSNOOPERS_GROUP 3758096490
     * }
     */
    public static int INADDR_ALLSNOOPERS_GROUP() {
        return (int)3758096490L;
    }
    /**
     * {@snippet :
     * #define INADDR_MAX_LOCAL_GROUP 3758096639
     * }
     */
    public static int INADDR_MAX_LOCAL_GROUP() {
        return (int)3758096639L;
    }
    /**
     * {@snippet :
     * #define _POSIX_VERSION 200809
     * }
     */
    public static long _POSIX_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __POSIX2_THIS_VERSION 200809
     * }
     */
    public static long __POSIX2_THIS_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_VERSION 200809
     * }
     */
    public static long _POSIX2_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_C_VERSION 200809
     * }
     */
    public static long _POSIX2_C_VERSION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_C_BIND 200809
     * }
     */
    public static long _POSIX2_C_BIND() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_C_DEV 200809
     * }
     */
    public static long _POSIX2_C_DEV() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_SW_DEV 200809
     * }
     */
    public static long _POSIX2_SW_DEV() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_LOCALEDEF 200809
     * }
     */
    public static long _POSIX2_LOCALEDEF() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PRIORITY_SCHEDULING 200809
     * }
     */
    public static long _POSIX_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYNCHRONIZED_IO 200809
     * }
     */
    public static long _POSIX_SYNCHRONIZED_IO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_FSYNC 200809
     * }
     */
    public static long _POSIX_FSYNC() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAPPED_FILES 200809
     * }
     */
    public static long _POSIX_MAPPED_FILES() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MEMLOCK 200809
     * }
     */
    public static long _POSIX_MEMLOCK() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MEMLOCK_RANGE 200809
     * }
     */
    public static long _POSIX_MEMLOCK_RANGE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MEMORY_PROTECTION 200809
     * }
     */
    public static long _POSIX_MEMORY_PROTECTION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_VDISABLE 0
     * }
     */
    public static int _POSIX_VDISABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREADS 200809
     * }
     */
    public static long _POSIX_THREADS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_SAFE_FUNCTIONS 200809
     * }
     */
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PRIORITY_SCHEDULING 200809
     * }
     */
    public static long _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ATTR_STACKSIZE 200809
     * }
     */
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ATTR_STACKADDR 200809
     * }
     */
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PRIO_INHERIT 200809
     * }
     */
    public static long _POSIX_THREAD_PRIO_INHERIT() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PRIO_PROTECT 200809
     * }
     */
    public static long _POSIX_THREAD_PRIO_PROTECT() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ROBUST_PRIO_INHERIT 200809
     * }
     */
    public static long _POSIX_THREAD_ROBUST_PRIO_INHERIT() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_ROBUST_PRIO_PROTECT -1
     * }
     */
    public static int _POSIX_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEMAPHORES 200809
     * }
     */
    public static long _POSIX_SEMAPHORES() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_REALTIME_SIGNALS 200809
     * }
     */
    public static long _POSIX_REALTIME_SIGNALS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ASYNCHRONOUS_IO 200809
     * }
     */
    public static long _POSIX_ASYNCHRONOUS_IO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PRIORITIZED_IO 200809
     * }
     */
    public static long _POSIX_PRIORITIZED_IO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SHARED_MEMORY_OBJECTS 200809
     * }
     */
    public static long _POSIX_SHARED_MEMORY_OBJECTS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_READER_WRITER_LOCKS 200809
     * }
     */
    public static long _POSIX_READER_WRITER_LOCKS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMEOUTS 200809
     * }
     */
    public static long _POSIX_TIMEOUTS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SPIN_LOCKS 200809
     * }
     */
    public static long _POSIX_SPIN_LOCKS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SPAWN 200809
     * }
     */
    public static long _POSIX_SPAWN() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMERS 200809
     * }
     */
    public static long _POSIX_TIMERS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_BARRIERS 200809
     * }
     */
    public static long _POSIX_BARRIERS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MESSAGE_PASSING 200809
     * }
     */
    public static long _POSIX_MESSAGE_PASSING() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_PROCESS_SHARED 200809
     * }
     */
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CLOCK_SELECTION 200809
     * }
     */
    public static long _POSIX_CLOCK_SELECTION() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ADVISORY_INFO 200809
     * }
     */
    public static long _POSIX_ADVISORY_INFO() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_IPV6 200809
     * }
     */
    public static long _POSIX_IPV6() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RAW_SOCKETS 200809
     * }
     */
    public static long _POSIX_RAW_SOCKETS() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_CHAR_TERM 200809
     * }
     */
    public static long _POSIX2_CHAR_TERM() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SPORADIC_SERVER -1
     * }
     */
    public static int _POSIX_SPORADIC_SERVER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_SPORADIC_SERVER -1
     * }
     */
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE -1
     * }
     */
    public static int _POSIX_TRACE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_EVENT_FILTER -1
     * }
     */
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_INHERIT -1
     * }
     */
    public static int _POSIX_TRACE_INHERIT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TRACE_LOG -1
     * }
     */
    public static int _POSIX_TRACE_LOG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TYPED_MEMORY_OBJECTS -1
     * }
     */
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V7_LPBIG_OFFBIG -1
     * }
     */
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_V6_LPBIG_OFFBIG -1
     * }
     */
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _XBS5_LPBIG_OFFBIG -1
     * }
     */
    public static int _XBS5_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFF32_CFLAGS "-m32"
     * }
     */
    public static MemorySegment __ILP32_OFF32_CFLAGS() {
        return constants$131.const$1;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFF32_LDFLAGS "-m32"
     * }
     */
    public static MemorySegment __ILP32_OFF32_LDFLAGS() {
        return constants$131.const$1;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFFBIG_CFLAGS "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
     * }
     */
    public static MemorySegment __ILP32_OFFBIG_CFLAGS() {
        return constants$131.const$2;
    }
    /**
     * {@snippet :
     * #define __ILP32_OFFBIG_LDFLAGS "-m32"
     * }
     */
    public static MemorySegment __ILP32_OFFBIG_LDFLAGS() {
        return constants$131.const$1;
    }
    /**
     * {@snippet :
     * #define __LP64_OFF64_CFLAGS "-m64"
     * }
     */
    public static MemorySegment __LP64_OFF64_CFLAGS() {
        return constants$131.const$3;
    }
    /**
     * {@snippet :
     * #define __LP64_OFF64_LDFLAGS "-m64"
     * }
     */
    public static MemorySegment __LP64_OFF64_LDFLAGS() {
        return constants$131.const$3;
    }
    /**
     * {@snippet :
     * #define L_SET 0
     * }
     */
    public static int L_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define L_INCR 1
     * }
     */
    public static int L_INCR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define L_XTND 2
     * }
     */
    public static int L_XTND() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _SC_PAGE_SIZE 30
     * }
     */
    public static int _SC_PAGE_SIZE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 1
     * }
     */
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS 4
     * }
     */
    public static int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS 5
     * }
     */
    public static int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ENET_SOCKET_NULL -1
     * }
     */
    public static int ENET_SOCKET_NULL() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define ENET_VERSION 66321
     * }
     */
    public static int ENET_VERSION() {
        return (int)66321L;
    }
    /**
     * {@snippet :
     * #define ENET_HOST_BROADCAST 4294967295
     * }
     */
    public static int ENET_HOST_BROADCAST() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define ENET_BUFFER_MAXIMUM 65
     * }
     */
    public static int ENET_BUFFER_MAXIMUM() {
        return (int)65L;
    }
}


