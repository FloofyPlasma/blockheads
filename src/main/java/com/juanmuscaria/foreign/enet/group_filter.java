// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct group_filter {
 *     uint32_t gf_interface;
 *     struct sockaddr_storage gf_group;
 *     uint32_t gf_fmode;
 *     uint32_t gf_numsrc;
 *     struct sockaddr_storage gf_slist[1];
 * };
 * }
 */
public class group_filter {

    public static MemoryLayout $LAYOUT() {
        return constants$52.const$4;
    }
    public static VarHandle gf_interface$VH() {
        return constants$52.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t gf_interface;
     * }
     */
    public static int gf_interface$get(MemorySegment seg) {
        return (int)constants$52.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t gf_interface;
     * }
     */
    public static void gf_interface$set(MemorySegment seg, int x) {
        constants$52.const$5.set(seg, x);
    }
    public static int gf_interface$get(MemorySegment seg, long index) {
        return (int)constants$52.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void gf_interface$set(MemorySegment seg, long index, int x) {
        constants$52.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gf_group$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    public static VarHandle gf_fmode$VH() {
        return constants$53.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t gf_fmode;
     * }
     */
    public static int gf_fmode$get(MemorySegment seg) {
        return (int)constants$53.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t gf_fmode;
     * }
     */
    public static void gf_fmode$set(MemorySegment seg, int x) {
        constants$53.const$0.set(seg, x);
    }
    public static int gf_fmode$get(MemorySegment seg, long index) {
        return (int)constants$53.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void gf_fmode$set(MemorySegment seg, long index, int x) {
        constants$53.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gf_numsrc$VH() {
        return constants$53.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t gf_numsrc;
     * }
     */
    public static int gf_numsrc$get(MemorySegment seg) {
        return (int)constants$53.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t gf_numsrc;
     * }
     */
    public static void gf_numsrc$set(MemorySegment seg, int x) {
        constants$53.const$1.set(seg, x);
    }
    public static int gf_numsrc$get(MemorySegment seg, long index) {
        return (int)constants$53.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void gf_numsrc$set(MemorySegment seg, long index, int x) {
        constants$53.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gf_slist$slice(MemorySegment seg) {
        return seg.asSlice(144, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


