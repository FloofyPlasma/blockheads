// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct ip_msfilter {
 *     struct in_addr imsf_multiaddr;
 *     struct in_addr imsf_interface;
 *     uint32_t imsf_fmode;
 *     uint32_t imsf_numsrc;
 *     struct in_addr imsf_slist[1];
 * };
 * }
 */
public class ip_msfilter {

    public static MemoryLayout $LAYOUT() {
        return constants$52.const$1;
    }
    public static MemorySegment imsf_multiaddr$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment imsf_interface$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static VarHandle imsf_fmode$VH() {
        return constants$52.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t imsf_fmode;
     * }
     */
    public static int imsf_fmode$get(MemorySegment seg) {
        return (int)constants$52.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t imsf_fmode;
     * }
     */
    public static void imsf_fmode$set(MemorySegment seg, int x) {
        constants$52.const$2.set(seg, x);
    }
    public static int imsf_fmode$get(MemorySegment seg, long index) {
        return (int)constants$52.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void imsf_fmode$set(MemorySegment seg, long index, int x) {
        constants$52.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle imsf_numsrc$VH() {
        return constants$52.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t imsf_numsrc;
     * }
     */
    public static int imsf_numsrc$get(MemorySegment seg) {
        return (int)constants$52.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t imsf_numsrc;
     * }
     */
    public static void imsf_numsrc$set(MemorySegment seg, int x) {
        constants$52.const$3.set(seg, x);
    }
    public static int imsf_numsrc$get(MemorySegment seg, long index) {
        return (int)constants$52.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void imsf_numsrc$set(MemorySegment seg, long index, int x) {
        constants$52.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment imsf_slist$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


