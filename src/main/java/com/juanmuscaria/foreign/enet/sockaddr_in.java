// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct sockaddr_in {
 *     sa_family_t sin_family;
 *     in_port_t sin_port;
 *     struct in_addr sin_addr;
 *     unsigned char sin_zero[8];
 * };
 * }
 */
public class sockaddr_in {

    public static MemoryLayout $LAYOUT() {
        return constants$49.const$1;
    }
    public static VarHandle sin_family$VH() {
        return constants$49.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sa_family_t sin_family;
     * }
     */
    public static short sin_family$get(MemorySegment seg) {
        return (short)constants$49.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sa_family_t sin_family;
     * }
     */
    public static void sin_family$set(MemorySegment seg, short x) {
        constants$49.const$2.set(seg, x);
    }
    public static short sin_family$get(MemorySegment seg, long index) {
        return (short)constants$49.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_family$set(MemorySegment seg, long index, short x) {
        constants$49.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sin_port$VH() {
        return constants$49.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * in_port_t sin_port;
     * }
     */
    public static short sin_port$get(MemorySegment seg) {
        return (short)constants$49.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * in_port_t sin_port;
     * }
     */
    public static void sin_port$set(MemorySegment seg, short x) {
        constants$49.const$3.set(seg, x);
    }
    public static short sin_port$get(MemorySegment seg, long index) {
        return (short)constants$49.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_port$set(MemorySegment seg, long index, short x) {
        constants$49.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sin_addr$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment sin_zero$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


